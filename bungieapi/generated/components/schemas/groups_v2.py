# generated by update to not change manually
import dataclasses as dt
import typing as t
from enum import Enum


@dt.dataclass(frozen=True)
class GroupUserInfoCard:
    last_seen_display_name: str  # This will be the display name the clan server last saw the user as. If the account is an active cross save override, this will be the display name to use. Otherwise, this will match the displayName property.
    last_seen_display_name_type: "BungieMembershipType"  # The platform of the LastSeenDisplayName
    applicable_membership_types: t.Sequence[
        "BungieMembershipType"
    ]  # The list of Membership Types indicating the platforms on which this Membership can be used.  Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
    bungie_global_display_name: str  # The bungie global display name, if set.
    bungie_global_display_name_code: int  # The bungie global display name code, if set.
    cross_save_override: "BungieMembershipType"  # If there is a cross save override in effect, this value will tell you the type that is overridding this one.
    display_name: str  # Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
    icon_path: str  # URL the Icon if available.
    is_public: bool  # If True, this is a public user membership.
    membership_id: int  # Membership ID as they user is known in the Accounts service
    membership_type: "BungieMembershipType"  # Type of the membership. Not necessarily the native type.
    supplemental_display_name: str  # A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.


@dt.dataclass(frozen=True)
class GroupResponse:
    alliance_status: "GroupAllianceStatus"
    allied_ids: t.Sequence[int]
    current_user_member_map: t.Mapping[
        str, "GroupMember"
    ]  # This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.
    current_user_memberships_inactive_for_destiny: bool  # A convenience property that indicates if every membership you (the current user) have that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.
    current_user_potential_member_map: t.Mapping[
        str, "GroupPotentialMember"
    ]  # This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.
    detail: "GroupV2"
    founder: "GroupMember"
    group_join_invite_count: int
    parent_group: "GroupV2"


@dt.dataclass(frozen=True)
class GroupV2:
    about: str
    allow_chat: bool
    avatar_image_index: int
    avatar_path: str
    ban_expire_date: str
    banner_path: str
    chat_security: "ChatSecuritySetting"
    clan_info: "GroupV2ClanInfoAndInvestment"
    conversation_id: int
    creation_date: str
    default_publicity: "GroupPostPublicity"
    enable_invitation_messaging_for_admins: bool
    features: "GroupFeatures"
    group_id: int
    group_type: "GroupType"
    homepage: "GroupHomepage"
    is_default_post_public: bool
    is_public: bool
    is_public_topic_admin_only: bool
    locale: str
    member_count: int
    membership_id_created: int
    membership_option: "MembershipOption"
    modification_date: str
    motto: str
    name: str
    tags: t.Sequence[str]
    theme: str


class GroupType(Enum):
    GENERAL = 0
    CLAN = 1


class ChatSecuritySetting(Enum):
    GROUP = 0
    ADMINS = 1


class GroupHomepage(Enum):
    WALL = 0
    FORUM = 1
    ALLIANCE_FORUM = 2


class MembershipOption(Enum):
    REVIEWED = 0
    OPEN = 1
    CLOSED = 2


class GroupPostPublicity(Enum):
    PUBLIC = 0
    ALLIANCE = 1
    PRIVATE = 2


@dt.dataclass(frozen=True)
class GroupFeatures:
    capabilities: "Capabilities"
    host_guided_game_permission_override: "HostGuidedGamesPermissionLevel"  # Minimum Member Level allowed to host guided games Always Allowed: Founder, Acting Founder, Admin Allowed Overrides: None, Member, Beginner Default is Member for clans, None for groups, although this means nothing for groups.
    invite_permission_override: bool  # Minimum Member Level allowed to invite new members to group Always Allowed: Founder, Acting Founder True means admins have this power, false means they don't Default is false for clans, true for groups.
    join_level: "RuntimeGroupMemberType"  # Level to join a member at when accepting an invite, application, or joining an open clan Default is Beginner.
    maximum_members: int
    maximum_memberships_of_group_type: int  # Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.
    membership_types: t.Sequence["BungieMembershipType"]
    update_banner_permission_override: bool  # Minimum Member Level allowed to update banner Always Allowed: Founder, Acting Founder True means admins have this power, false means they don't Default is false for clans, true for groups.
    update_culture_permission_override: bool  # Minimum Member Level allowed to update group culture Always Allowed: Founder, Acting Founder True means admins have this power, false means they don't Default is false for clans, true for groups.


class Capabilities(Enum):
    NONE = 0
    LEADERBOARDS = 1
    CALLSIGN = 2
    OPTIONAL_CONVERSATIONS = 4
    CLAN_BANNER = 8
    D2_INVESTMENT_DATA = 16
    TAGS = 32
    ALLIANCES = 64


class HostGuidedGamesPermissionLevel(Enum):
    """Used for setting the guided game permission level override (admins and
    founders can always host guided games)."""

    NONE = 0
    BEGINNER = 1
    MEMBER = 2


class RuntimeGroupMemberType(Enum):
    """The member levels used by all V2 Groups API.

    Individual group types use their own mappings in their native
    storage (general uses BnetDbGroupMemberType and D2 clans use
    ClanMemberLevel), but they are all translated to this in the runtime
    api. These runtime values should NEVER be stored anywhere, so the
    values can be changed as necessary.
    """

    NONE = 0
    BEGINNER = 1
    MEMBER = 2
    ADMIN = 3
    ACTING_FOUNDER = 4
    FOUNDER = 5


@dt.dataclass(frozen=True)
class GroupV2ClanInfo:
    """This contract contains clan-specific group information.

    It does not include any investment data.
    """

    clan_banner_data: "ClanBanner"
    clan_callsign: str


@dt.dataclass(frozen=True)
class ClanBanner:
    decal_background_color_id: int
    decal_color_id: int
    decal_id: int
    gonfalon_color_id: int
    gonfalon_detail_color_id: int
    gonfalon_detail_id: int
    gonfalon_id: int


@dt.dataclass(frozen=True)
class GroupV2ClanInfoAndInvestment:
    """The same as GroupV2ClanInfo, but includes any investment data."""

    clan_banner_data: "ClanBanner"
    clan_callsign: str
    d2_clan_progressions: t.Mapping[str, "DestinyProgression"]


@dt.dataclass(frozen=True)
class GroupUserBase:
    bungie_net_user_info: "UserInfoCard"
    destiny_user_info: "GroupUserInfoCard"
    group_id: int
    join_date: str


@dt.dataclass(frozen=True)
class GroupMember:
    bungie_net_user_info: "UserInfoCard"
    destiny_user_info: "GroupUserInfoCard"
    group_id: int
    is_online: bool
    join_date: str
    last_online_status_change: int
    member_type: "RuntimeGroupMemberType"


class GroupAllianceStatus(Enum):
    UNALLIED = 0
    PARENT = 1
    CHILD = 2


@dt.dataclass(frozen=True)
class GroupPotentialMember:
    bungie_net_user_info: "UserInfoCard"
    destiny_user_info: "GroupUserInfoCard"
    group_id: int
    join_date: str
    potential_status: "GroupPotentialMemberStatus"


class GroupPotentialMemberStatus(Enum):
    NONE = 0
    APPLICANT = 1
    INVITEE = 2


class GroupDateRange(Enum):
    ALL = 0
    PAST_DAY = 1
    PAST_WEEK = 2
    PAST_MONTH = 3
    PAST_YEAR = 4


@dt.dataclass(frozen=True)
class GroupV2Card:
    """A small infocard of group information, usually used for when a list of
    groups are returned."""

    about: str
    avatar_path: str
    capabilities: "Capabilities"
    clan_info: "GroupV2ClanInfo"
    creation_date: str
    group_id: int
    group_type: "GroupType"
    locale: str
    member_count: int
    membership_option: "MembershipOption"
    motto: str
    name: str
    theme: str


@dt.dataclass(frozen=True)
class GroupSearchResponse:
    has_more: bool
    query: "PagedQuery"
    replacement_continuation_token: str
    results: t.Sequence["GroupV2Card"]
    total_results: int
    use_total_results: bool  # If useTotalResults is true, then totalResults represents an accurate count. If False, it does not, and may be estimated/only the size of the current page. Either way, you should probably always only trust hasMore. This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.


@dt.dataclass(frozen=True)
class GroupQuery:
    """NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible "modes".
    If you are querying for a group, you can pass any of the properties below.
    If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):
    - groupMemberCountFilter - localeFilter - tagText
    If you pass these, you will get a useless InvalidParameters error."""

    creation_date: "GroupDateRange"
    current_page: int
    group_member_count_filter: int
    group_type: "GroupType"
    items_per_page: int
    locale_filter: str
    name: str
    request_continuation_token: str
    sort_by: "GroupSortBy"
    tag_text: str


class GroupSortBy(Enum):
    NAME = 0
    DATE = 1
    POPULARITY = 2
    ID = 3


class GroupMemberCountFilter(Enum):
    ALL = 0
    ONE_TO_TEN = 1
    ELEVEN_TO_ONE_HUNDRED = 2
    GREATER_THAN_ONE_HUNDRED = 3


@dt.dataclass(frozen=True)
class GroupNameSearchRequest:
    group_name: str
    group_type: "GroupType"


@dt.dataclass(frozen=True)
class GroupOptionalConversation:
    chat_enabled: bool
    chat_name: str
    chat_security: "ChatSecuritySetting"
    conversation_id: int
    group_id: int


@dt.dataclass(frozen=True)
class GroupEditAction:
    about: str
    allow_chat: bool
    avatar_image_index: int
    callsign: str
    chat_security: int
    default_publicity: int
    enable_invitation_messaging_for_admins: bool
    homepage: int
    is_public: bool
    is_public_topic_admin_only: bool
    locale: str
    membership_option: int
    motto: str
    name: str
    tags: str
    theme: str


@dt.dataclass(frozen=True)
class GroupOptionsEditAction:
    host_guided_game_permission_override: int  # Minimum Member Level allowed to host guided games Always Allowed: Founder, Acting Founder, Admin Allowed Overrides: None, Member, Beginner Default is Member for clans, None for groups, although this means nothing for groups.
    invite_permission_override: bool  # Minimum Member Level allowed to invite new members to group Always Allowed: Founder, Acting Founder True means admins have this power, false means they don't Default is false for clans, true for groups.
    join_level: int  # Level to join a member at when accepting an invite, application, or joining an open clan Default is Beginner.
    update_banner_permission_override: bool  # Minimum Member Level allowed to update banner Always Allowed: Founder, Acting Founder True means admins have this power, false means they don't Default is false for clans, true for groups.
    update_culture_permission_override: bool  # Minimum Member Level allowed to update group culture Always Allowed: Founder, Acting Founder True means admins have this power, false means they don't Default is false for clans, true for groups.


@dt.dataclass(frozen=True)
class GroupOptionalConversationAddRequest:
    chat_name: str
    chat_security: "ChatSecuritySetting"


@dt.dataclass(frozen=True)
class GroupOptionalConversationEditRequest:
    chat_enabled: bool
    chat_name: str
    chat_security: int


@dt.dataclass(frozen=True)
class GroupMemberLeaveResult:
    group: "GroupV2"
    group_deleted: bool


@dt.dataclass(frozen=True)
class GroupBanRequest:
    comment: str
    length: "IgnoreLength"


@dt.dataclass(frozen=True)
class GroupBan:
    bungie_net_user_info: "UserInfoCard"
    comment: str
    created_by: "UserInfoCard"
    date_banned: str
    date_expires: str
    destiny_user_info: "GroupUserInfoCard"
    group_id: int
    last_modified_by: "UserInfoCard"


@dt.dataclass(frozen=True)
class GroupMemberApplication:
    bungie_net_user_info: "UserInfoCard"
    creation_date: str
    destiny_user_info: "GroupUserInfoCard"
    group_id: int
    request_message: str
    resolve_date: str
    resolve_message: str
    resolve_state: "GroupApplicationResolveState"
    resolved_by_membership_id: int


class GroupApplicationResolveState(Enum):
    UNRESOLVED = 0
    ACCEPTED = 1
    DENIED = 2
    RESCINDED = 3


@dt.dataclass(frozen=True)
class GroupApplicationRequest:
    message: str


@dt.dataclass(frozen=True)
class GroupApplicationListRequest:
    memberships: t.Sequence["UserMembership"]
    message: str


class GroupsForMemberFilter(Enum):
    ALL = 0
    FOUNDED = 1
    NON_FOUNDED = 2


@dt.dataclass(frozen=True)
class GroupMembershipBase:
    group: "GroupV2"


@dt.dataclass(frozen=True)
class GroupMembership:
    group: "GroupV2"
    member: "GroupMember"


@dt.dataclass(frozen=True)
class GroupMembershipSearchResponse:
    has_more: bool
    query: "PagedQuery"
    replacement_continuation_token: str
    results: t.Sequence["GroupMembership"]
    total_results: int
    use_total_results: bool  # If useTotalResults is true, then totalResults represents an accurate count. If False, it does not, and may be estimated/only the size of the current page. Either way, you should probably always only trust hasMore. This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.


@dt.dataclass(frozen=True)
class GetGroupsForMemberResponse:
    are_all_memberships_inactive: t.Mapping[
        str, bool
    ]  # A convenience property that indicates if every membership this user has that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.  The key is the Group ID for the group being checked, and the value is true if the users' memberships for that group are all inactive.
    has_more: bool
    query: "PagedQuery"
    replacement_continuation_token: str
    results: t.Sequence["GroupMembership"]
    total_results: int
    use_total_results: bool  # If useTotalResults is true, then totalResults represents an accurate count. If False, it does not, and may be estimated/only the size of the current page. Either way, you should probably always only trust hasMore. This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.


@dt.dataclass(frozen=True)
class GroupPotentialMembership:
    group: "GroupV2"
    member: "GroupPotentialMember"


@dt.dataclass(frozen=True)
class GroupPotentialMembershipSearchResponse:
    has_more: bool
    query: "PagedQuery"
    replacement_continuation_token: str
    results: t.Sequence["GroupPotentialMembership"]
    total_results: int
    use_total_results: bool  # If useTotalResults is true, then totalResults represents an accurate count. If False, it does not, and may be estimated/only the size of the current page. Either way, you should probably always only trust hasMore. This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.


@dt.dataclass(frozen=True)
class GroupApplicationResponse:
    resolution: "GroupApplicationResolveState"


# imported at the end to do not case circular imports for type annotations
from bungieapi.generated.components.schemas import BungieMembershipType  # noqa: E402
from bungieapi.generated.components.schemas.destiny import (
    DestinyProgression,
)  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import Capabilities  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import ClanBanner  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import GroupFeatures  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import GroupHomepage  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import GroupMember  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import GroupSortBy  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import GroupType  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import GroupV2  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import GroupV2Card  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import (  # noqa: E402
    ChatSecuritySetting,
    GroupAllianceStatus,
    GroupApplicationResolveState,
    GroupDateRange,
    GroupMembership,
    GroupPostPublicity,
    GroupPotentialMember,
    GroupPotentialMembership,
    GroupPotentialMemberStatus,
    GroupUserInfoCard,
    GroupV2ClanInfo,
    GroupV2ClanInfoAndInvestment,
    HostGuidedGamesPermissionLevel,
    MembershipOption,
    RuntimeGroupMemberType,
)
from bungieapi.generated.components.schemas.ignores import IgnoreLength  # noqa: E402
from bungieapi.generated.components.schemas.queries import PagedQuery  # noqa: E402
from bungieapi.generated.components.schemas.user import UserInfoCard  # noqa: E402
from bungieapi.generated.components.schemas.user import UserMembership  # noqa: E402
