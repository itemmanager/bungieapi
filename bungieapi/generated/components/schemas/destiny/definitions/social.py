# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.json import to_json
from bungieapi.types import ManifestReference


@dt.dataclass(frozen=True)
class DestinySocialCommendationNodeDefinition:
    child_commendation_hashes: t.Sequence[int] = dt.field(
        metadata={"description": "A list of hashes that map to child commendations."}
    )
    child_commendation_node_hashes: t.Sequence[int] = dt.field(
        metadata={
            "description": "A list of hashes that map to child commendation nodes. Only the root commendations node is expected to have child nodes."
        }
    )
    color: "DestinyColor" = dt.field(
        metadata={
            "description": "The color associated with this group of commendations."
        }
    )
    display_properties: "DestinyDisplayPropertiesDefinition"
    hash: int = dt.field(
        metadata={
            "description": """The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to."""
        }
    )
    index: int = dt.field(
        metadata={
            "description": "The index of the entity as it was found in the investment tables."
        }
    )
    parent_commendation_node_hash: ManifestReference[
        "DestinySocialCommendationNodeDefinition"
    ]
    redacted: bool = dt.field(
        metadata={
            "description": "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!"
        }
    )

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "displayProperties": to_json(self.display_properties),
            "color": to_json(self.color),
            "parentCommendationNodeHash": to_json(self.parent_commendation_node_hash),
            "childCommendationNodeHashes": to_json(self.child_commendation_node_hashes),
            "childCommendationHashes": to_json(self.child_commendation_hashes),
            "hash": to_json(self.hash),
            "index": to_json(self.index),
            "redacted": to_json(self.redacted),
        }


@dt.dataclass(frozen=True)
class DestinySocialCommendationDefinition:
    activity_giving_limit: int
    card_image_path: str
    color: "DestinyColor"
    display_activities: t.Sequence["DestinyDisplayPropertiesDefinition"] = dt.field(
        metadata={
            "description": "The display properties for the the activities that this commendation is available in."
        }
    )
    display_priority: int
    display_properties: "DestinyDisplayPropertiesDefinition"
    hash: int = dt.field(
        metadata={
            "description": """The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
When entities refer to each other in Destiny content, it is this hash that they are referring to."""
        }
    )
    index: int = dt.field(
        metadata={
            "description": "The index of the entity as it was found in the investment tables."
        }
    )
    parent_commendation_node_hash: ManifestReference[
        "DestinySocialCommendationNodeDefinition"
    ]
    redacted: bool = dt.field(
        metadata={
            "description": "If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!"
        }
    )

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "displayProperties": to_json(self.display_properties),
            "cardImagePath": to_json(self.card_image_path),
            "color": to_json(self.color),
            "displayPriority": to_json(self.display_priority),
            "activityGivingLimit": to_json(self.activity_giving_limit),
            "parentCommendationNodeHash": to_json(self.parent_commendation_node_hash),
            "displayActivities": to_json(self.display_activities),
            "hash": to_json(self.hash),
            "index": to_json(self.index),
            "redacted": to_json(self.redacted),
        }


# imported at the end to do not case circular imports for type annotations
from bungieapi.generated.components.schemas.destiny.definitions.common import (  # noqa: E402
    DestinyDisplayPropertiesDefinition,
)
from bungieapi.generated.components.schemas.destiny.misc import (  # noqa: E402
    DestinyColor,
)
