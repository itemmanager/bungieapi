# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.json import to_json


@dt.dataclass(frozen=True)
class IEnumerableOfApplicationClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["Application"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class ListOfGetCredentialTypesForAccountClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["GetCredentialTypesForAccountResponse"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class ListOfUserThemeClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["UserTheme"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class SearchResultOfContentItemPublicContractClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional["SearchResultOfContentItemPublicContract"] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class IReadOnlyCollectionOfContentItemPublicContractClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Any] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class int64ClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[int] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class ListOfTagClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["TagResponse"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class CEListOfForumRecruitmentDetailClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["ForumRecruitmentDetail"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class DictionaryOfint32AndstringClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Mapping[str, str]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class ListOfGroupThemeClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["GroupTheme"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class booleanClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[bool] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class ListOfGroupV2CardClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["GroupV2Card"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class CEListOfGroupOptionalConversationClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["GroupOptionalConversation"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class int32ClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[int] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class SearchResultOfGroupMemberClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional["SearchResultOfGroupMember"] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class SearchResultOfGroupBanClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional["SearchResultOfGroupBan"] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class SearchResultOfGroupMemberApplicationClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional["SearchResultOfGroupMemberApplication"] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class ListOfEntityActionResultClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["EntityActionResult"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class CEListOfPartnerOfferSkuHistoryClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["PartnerOfferSkuHistoryResponse"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class IEnumerableOfUserInfoCardClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["UserInfoCard"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class ReadOnlyDictionaryOfstringAndDestinyHistoricalStatsDefinitionClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Mapping[str, "DestinyHistoricalStatsDefinition"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class ListOfDestinyClanAggregateStatClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["DestinyClanAggregateStat"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class DictionaryOfuint32AndDestinyPublicMilestoneClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Mapping[str, "DestinyPublicMilestone"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class SearchResultOfTrendingEntryClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional["SearchResultOfTrendingEntry"] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class SearchResultOfFireteamSummaryClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional["SearchResultOfFireteamSummary"] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class SearchResultOfFireteamClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional["SearchResultOfFireteamResponse"] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class CEDictionaryOfstringAndstringClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Mapping[str, str]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class DictionaryOfstringAndCoreSystemClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Mapping[str, "CoreSystem"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


@dt.dataclass(frozen=True)
class CEListOfGlobalAlertClientResponse:
    detailed_error_trace: t.Optional[str] = None
    error_code: t.Optional["PlatformErrorCodes"] = None
    error_status: t.Optional[str] = None
    message: t.Optional[str] = None
    message_data: t.Optional[t.Mapping[str, str]] = None
    response: t.Optional[t.Sequence["GlobalAlert"]] = None
    throttle_seconds: t.Optional[int] = None

    def to_json(self) -> t.Mapping[str, t.Any]:
        return {
            "Response": to_json(self.response),
            "ErrorCode": to_json(self.error_code),
            "ThrottleSeconds": to_json(self.throttle_seconds),
            "ErrorStatus": to_json(self.error_status),
            "Message": to_json(self.message),
            "MessageData": to_json(self.message_data),
            "DetailedErrorTrace": to_json(self.detailed_error_trace),
        }


from bungieapi.generated.components.schemas import GlobalAlert  # noqa: E402
from bungieapi.generated.components.schemas import (
    SearchResultOfContentItemPublicContract,
)  # noqa: E402
from bungieapi.generated.components.schemas import (
    SearchResultOfFireteamResponse,
)  # noqa: E402
from bungieapi.generated.components.schemas import (
    SearchResultOfFireteamSummary,
)  # noqa: E402
from bungieapi.generated.components.schemas import SearchResultOfGroupBan  # noqa: E402
from bungieapi.generated.components.schemas import (
    SearchResultOfGroupMember,
)  # noqa: E402
from bungieapi.generated.components.schemas import (
    SearchResultOfGroupMemberApplication,
)  # noqa: E402
from bungieapi.generated.components.schemas import (
    SearchResultOfTrendingEntry,
)  # noqa: E402

# imported at the end to do not case circular imports for type annotations
from bungieapi.generated.components.schemas.applications import (
    Application,
)  # noqa: E402
from bungieapi.generated.components.schemas.common.models import (
    CoreSystem,
)  # noqa: E402
from bungieapi.generated.components.schemas.config import GroupTheme  # noqa: E402
from bungieapi.generated.components.schemas.config import UserTheme  # noqa: E402
from bungieapi.generated.components.schemas.destiny.historical_stats import (
    DestinyClanAggregateStat,
)  # noqa: E402
from bungieapi.generated.components.schemas.destiny.historical_stats.definitions import (
    DestinyHistoricalStatsDefinition,
)  # noqa: E402
from bungieapi.generated.components.schemas.destiny.milestones import (
    DestinyPublicMilestone,
)  # noqa: E402
from bungieapi.generated.components.schemas.entities import (
    EntityActionResult,
)  # noqa: E402
from bungieapi.generated.components.schemas.exceptions import (
    PlatformErrorCodes,
)  # noqa: E402
from bungieapi.generated.components.schemas.forum import (
    ForumRecruitmentDetail,
)  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import (
    GroupOptionalConversation,
)  # noqa: E402
from bungieapi.generated.components.schemas.groups_v2 import GroupV2Card  # noqa: E402
from bungieapi.generated.components.schemas.tags.models.contracts import (
    TagResponse,
)  # noqa: E402
from bungieapi.generated.components.schemas.tokens import (
    PartnerOfferSkuHistoryResponse,
)  # noqa: E402
from bungieapi.generated.components.schemas.user import UserInfoCard  # noqa: E402
from bungieapi.generated.components.schemas.user.models import (
    GetCredentialTypesForAccountResponse,
)  # noqa: E402
