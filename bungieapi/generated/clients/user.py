# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.base import BaseClient
from bungieapi.forge import forge
from bungieapi.generated.types.config import UserTheme
from bungieapi.generated.types.exceptions import PlatformErrorCodes
from bungieapi.generated.types.user import (
    GeneralUser,
    HardLinkedUserMembership,
    UserMembershipData,
    UserSearchResponse,
)
from bungieapi.generated.types.user.models import GetCredentialTypesForAccountResponse


@dt.dataclass(frozen=True)
class GetBungieNetUserByIdClientResponse:
    response: "GeneralUser"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetCredentialTypesForTargetAccountClientResponse:
    response: t.Sequence["GetCredentialTypesForAccountResponse"]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetAvailableThemesClientResponse:
    response: t.Sequence["UserTheme"]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetMembershipDataByIdClientResponse:
    response: "UserMembershipData"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetMembershipDataForCurrentUserClientResponse:
    response: "UserMembershipData"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetMembershipFromHardLinkedCredentialClientResponse:
    response: "HardLinkedUserMembership"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class SearchByGlobalNamePrefixClientResponse:
    response: "UserSearchResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class SearchByGlobalNamePostClientResponse:
    response: "UserSearchResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


class Client(BaseClient):
    async def get_bungie_net_user_by_id(
        self,
        id: int,
    ) -> GetBungieNetUserByIdClientResponse:
        """Loads a bungienet user by membership id.

        Parameters:
            id: The requested Bungie.net membership id.
        """
        query = None
        result = await self.get(path=f"/User/GetBungieNetUserById/{id}/", query=query)
        return forge(GetBungieNetUserByIdClientResponse, result)

    async def get_credential_types_for_target_account(
        self,
        membership_id: int,
    ) -> GetCredentialTypesForTargetAccountClientResponse:
        """Returns a list of credential types attached to the requested account
        Parameters:
            membership_id: The user's membership id"""
        query = None
        result = await self.get(
            path=f"/User/GetCredentialTypesForTargetAccount/{membership_id}/",
            query=query,
        )
        return forge(GetCredentialTypesForTargetAccountClientResponse, result)

    async def get_available_themes(
        self,
    ) -> GetAvailableThemesClientResponse:
        """Returns a list of all available user themes."""
        query = None
        result = await self.get(path="/User/GetAvailableThemes/", query=query)
        return forge(GetAvailableThemesClientResponse, result)

    async def get_membership_data_by_id(
        self,
        membership_id: int,
        membership_type: int,
    ) -> GetMembershipDataByIdClientResponse:
        """Returns a list of accounts associated with the supplied membership
        ID and membership type.

        This will include all linked accounts (even when hidden) if supplied credentials permit it.
        Parameters:
            membership_id: The membership ID of the target user.
            membership_type: Type of the supplied membership ID.
        """
        query = None
        result = await self.get(
            path=f"/User/GetMembershipsById/{membership_id}/{membership_type}/",
            query=query,
        )
        return forge(GetMembershipDataByIdClientResponse, result)

    async def get_membership_data_for_current_user(
        self,
    ) -> GetMembershipDataForCurrentUserClientResponse:
        """Returns a list of accounts associated with signed in user.

        This is useful for OAuth implementations that do not give you
        access to the token response.
        """
        query = None
        result = await self.get(path="/User/GetMembershipsForCurrentUser/", query=query)
        return forge(GetMembershipDataForCurrentUserClientResponse, result)

    async def get_membership_from_hard_linked_credential(
        self,
        credential: str,
        cr_type: int,
    ) -> GetMembershipFromHardLinkedCredentialClientResponse:
        """Gets any hard linked membership given a credential.

        Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
        Parameters:
            credential: The credential to look up. Must be a valid SteamID64.
            cr_type: The credential type. 'SteamId' is the only valid value at present.
        """
        query = None
        result = await self.get(
            path=f"/User/GetMembershipFromHardLinkedCredential/{cr_type}/{credential}/",
            query=query,
        )
        return forge(GetMembershipFromHardLinkedCredentialClientResponse, result)

    async def search_by_global_name_prefix(
        self,
        display_name_prefix: str,
        page: int,
    ) -> SearchByGlobalNamePrefixClientResponse:
        """[OBSOLETE] Do not use this to search users, use
        SearchByGlobalNamePost instead.

        Parameters:
            display_name_prefix: The display name prefix you're looking for.
            page: The zero-based page of results you desire.
        """
        query = None
        result = await self.get(
            path=f"/User/Search/Prefix/{display_name_prefix}/{page}/", query=query
        )
        return forge(SearchByGlobalNamePrefixClientResponse, result)

    async def search_by_global_name_post(
        self,
        page: int,
    ) -> SearchByGlobalNamePostClientResponse:
        """Given the prefix of a global display name, returns all users who
        share that name.

        Parameters:
            page: The zero-based page of results you desire.
        """
        query = None
        result = await self.post(path=f"/User/Search/GlobalName/{page}/", query=query)
        return forge(SearchByGlobalNamePostClientResponse, result)
