# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.base import BaseClient
from bungieapi.forge import forge
from bungieapi.generated.types import SearchResultOfTrendingEntry
from bungieapi.generated.types.exceptions import PlatformErrorCodes
from bungieapi.generated.types.trending import TrendingCategories, TrendingDetail


@dt.dataclass(frozen=True)
class GetTrendingCategoriesClientResponse:
    response: "TrendingCategories"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetTrendingCategoryClientResponse:
    response: "SearchResultOfTrendingEntry"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetTrendingEntryDetailClientResponse:
    response: "TrendingDetail"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


class Client(BaseClient):
    async def get_trending_categories(
        self,
    ) -> GetTrendingCategoriesClientResponse:
        """Returns trending items for Bungie.net, collapsed into the first page
        of items per category.

        For pagination within a category, call GetTrendingCategory.
        """
        query = None
        result = await self.get(path="/Trending/Categories/", query=query)
        return forge(GetTrendingCategoriesClientResponse, result)

    async def get_trending_category(
        self,
        category_id: str,
        page_number: int,
    ) -> GetTrendingCategoryClientResponse:
        """Returns paginated lists of trending items for a category.

        Parameters:
            category_id: The ID of the category for whom you want additional results.
            page_number: The page # of results to return.
        """
        query = None
        result = await self.get(
            path=f"/Trending/Categories/{category_id}/{page_number}/", query=query
        )
        return forge(GetTrendingCategoryClientResponse, result)

    async def get_trending_entry_detail(
        self,
        identifier: str,
        trending_entry_type: int,
    ) -> GetTrendingEntryDetailClientResponse:
        """Returns the detailed results for a specific trending entry.

        Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        Parameters:
            identifier: The identifier for the entity to be returned.
            trending_entry_type: The type of entity to be returned.
        """
        query = None
        result = await self.get(
            path=f"/Trending/Details/{trending_entry_type}/{identifier}/", query=query
        )
        return forge(GetTrendingEntryDetailClientResponse, result)
