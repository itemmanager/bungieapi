# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.generated.types import (SearchResultOfGroupBan,
                                       SearchResultOfGroupMember,
                                       SearchResultOfGroupMemberApplication)
from bungieapi.generated.types.config import GroupTheme
from bungieapi.generated.types.entities import EntityActionResult
from bungieapi.generated.types.exceptions import PlatformErrorCodes
from bungieapi.generated.types.groups_v2 import (
    GetGroupsForMemberResponse, GroupApplicationResponse,
    GroupMemberLeaveResult, GroupMembershipSearchResponse,
    GroupOptionalConversation, GroupPotentialMembershipSearchResponse,
    GroupResponse, GroupSearchResponse, GroupV2Card)

from ...base import BaseClient


@dt.dataclass(frozen=True)
class GetAvailableAvatarsClientResponse:
    response: t.Mapping[str, str]
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetAvailableThemesClientResponse:
    response: t.Sequence[GroupTheme]
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetUserClanInviteSettingClientResponse:
    response: bool
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetRecommendedGroupsClientResponse:
    response: t.Sequence[GroupV2Card]
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GroupSearchClientResponse:
    response: GroupSearchResponse
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetGroupClientResponse:
    response: GroupResponse
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetGroupByNameClientResponse:
    response: GroupResponse
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetGroupByNameV2ClientResponse:
    response: GroupResponse
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetGroupOptionalConversationsClientResponse:
    response: t.Sequence[GroupOptionalConversation]
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class EditGroupClientResponse:
    response: int
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class EditClanBannerClientResponse:
    response: int
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class EditFounderOptionsClientResponse:
    response: int
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class AddOptionalConversationClientResponse:
    response: int
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class EditOptionalConversationClientResponse:
    response: int
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetMembersOfGroupClientResponse:
    response: SearchResultOfGroupMember
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetAdminsAndFounderOfGroupClientResponse:
    response: SearchResultOfGroupMember
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class EditGroupMembershipClientResponse:
    response: int
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class KickMemberClientResponse:
    response: GroupMemberLeaveResult
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class BanMemberClientResponse:
    response: int
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class UnbanMemberClientResponse:
    response: int
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetBannedMembersOfGroupClientResponse:
    response: SearchResultOfGroupBan
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class AbdicateFoundershipClientResponse:
    response: bool
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetPendingMembershipsClientResponse:
    response: SearchResultOfGroupMemberApplication
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetInvitedIndividualsClientResponse:
    response: SearchResultOfGroupMemberApplication
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class ApproveAllPendingClientResponse:
    response: t.Sequence[EntityActionResult]
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class DenyAllPendingClientResponse:
    response: t.Sequence[EntityActionResult]
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class ApprovePendingForListClientResponse:
    response: t.Sequence[EntityActionResult]
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class ApprovePendingClientResponse:
    response: bool
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class DenyPendingForListClientResponse:
    response: t.Sequence[EntityActionResult]
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetGroupsForMemberClientResponse:
    response: GetGroupsForMemberResponse
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class RecoverGroupForFounderClientResponse:
    response: GroupMembershipSearchResponse
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetPotentialGroupsForMemberClientResponse:
    response: GroupPotentialMembershipSearchResponse
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class IndividualGroupInviteClientResponse:
    response: GroupApplicationResponse
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class IndividualGroupInviteCancelClientResponse:
    response: GroupApplicationResponse
    error_code: PlatformErrorCodes
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


class Client(BaseClient):
    async def get_available_avatars(
        self,
    ) -> GetAvailableAvatarsClientResponse:
        """Returns a list of all available group avatars for the signed-in
        user."""
        ...

    async def get_available_themes(
        self,
    ) -> GetAvailableThemesClientResponse:
        """Returns a list of all available group themes."""
        ...

    async def get_user_clan_invite_setting(
        self,
        m_type: int,
    ) -> GetUserClanInviteSettingClientResponse:
        """Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise."""
        ...

    async def get_recommended_groups(
        self,
        create_date_range: int,
        group_type: int,
    ) -> GetRecommendedGroupsClientResponse:
        """Gets groups recommended for you based on the groups to whom those
        you follow belong."""
        ...

    async def group_search(
        self,
    ) -> GroupSearchClientResponse:
        """Search for Groups."""
        ...

    async def get_group(
        self,
        group_id: int,
    ) -> GetGroupClientResponse:
        """Get information about a specific group of the given ID."""
        ...

    async def get_group_by_name(
        self,
        group_name: str,
        group_type: int,
    ) -> GetGroupByNameClientResponse:
        """Get information about a specific group with the given name and
        type."""
        ...

    async def get_group_by_name_v2(
        self,
    ) -> GetGroupByNameV2ClientResponse:
        """Get information about a specific group with the given name and type.

        The POST version.
        """
        ...

    async def get_group_optional_conversations(
        self,
        group_id: int,
    ) -> GetGroupOptionalConversationsClientResponse:
        """Gets a list of available optional conversation channels and their
        settings."""
        ...

    async def edit_group(
        self,
        group_id: int,
    ) -> EditGroupClientResponse:
        """Edit an existing group.

        You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        """
        ...

    async def edit_clan_banner(
        self,
        group_id: int,
    ) -> EditClanBannerClientResponse:
        """Edit an existing group's clan banner.

        You must have suitable permissions in the group to perform this
        operation. All fields are required.
        """
        ...

    async def edit_founder_options(
        self,
        group_id: int,
    ) -> EditFounderOptionsClientResponse:
        """Edit group options only available to a founder.

        You must have suitable permissions in the group to perform this
        operation.
        """
        ...

    async def add_optional_conversation(
        self,
        group_id: int,
    ) -> AddOptionalConversationClientResponse:
        """Add a new optional conversation/chat channel.

        Requires admin permissions to the group.
        """
        ...

    async def edit_optional_conversation(
        self,
        conversation_id: int,
        group_id: int,
    ) -> EditOptionalConversationClientResponse:
        """Edit the settings of an optional conversation/chat channel.

        Requires admin permissions to the group.
        """
        ...

    async def get_members_of_group(
        self,
        currentpage: int,
        group_id: int,
        member_type: t.Optional[int] = None,
        name_search: t.Optional[str] = None,
    ) -> GetMembersOfGroupClientResponse:
        """Get the list of members in a given group."""
        ...

    async def get_admins_and_founder_of_group(
        self,
        currentpage: int,
        group_id: int,
    ) -> GetAdminsAndFounderOfGroupClientResponse:
        """Get the list of members in a given group who are of admin level or
        higher."""
        ...

    async def edit_group_membership(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
        member_type: int,
    ) -> EditGroupMembershipClientResponse:
        """Edit the membership type of a given member.

        You must have suitable permissions in the group to perform this
        operation.
        """
        ...

    async def kick_member(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> KickMemberClientResponse:
        """Kick a member from the given group, forcing them to reapply if they
        wish to re-join the group.

        You must have suitable permissions in the group to perform this
        operation.
        """
        ...

    async def ban_member(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> BanMemberClientResponse:
        """Bans the requested member from the requested group for the specified
        period of time."""
        ...

    async def unban_member(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> UnbanMemberClientResponse:
        """Unbans the requested member, allowing them to re-apply for
        membership."""
        ...

    async def get_banned_members_of_group(
        self,
        currentpage: int,
        group_id: int,
    ) -> GetBannedMembersOfGroupClientResponse:
        """Get the list of banned members in a given group.

        Only accessible to group Admins and above. Not applicable to all
        groups. Check group features.
        """
        ...

    async def abdicate_foundership(
        self,
        founder_id_new: int,
        group_id: int,
        membership_type: int,
    ) -> AbdicateFoundershipClientResponse:
        """An administrative method to allow the founder of a group or clan to
        give up their position to another admin permanently."""
        ...

    async def get_pending_memberships(
        self,
        currentpage: int,
        group_id: int,
    ) -> GetPendingMembershipsClientResponse:
        """Get the list of users who are awaiting a decision on their
        application to join a given group.

        Modified to include application info.
        """
        ...

    async def get_invited_individuals(
        self,
        currentpage: int,
        group_id: int,
    ) -> GetInvitedIndividualsClientResponse:
        """Get the list of users who have been invited into the group."""
        ...

    async def approve_all_pending(
        self,
        group_id: int,
    ) -> ApproveAllPendingClientResponse:
        """Approve all of the pending users for the given group."""
        ...

    async def deny_all_pending(
        self,
        group_id: int,
    ) -> DenyAllPendingClientResponse:
        """Deny all of the pending users for the given group."""
        ...

    async def approve_pending_for_list(
        self,
        group_id: int,
    ) -> ApprovePendingForListClientResponse:
        """Approve all of the pending users for the given group."""
        ...

    async def approve_pending(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> ApprovePendingClientResponse:
        """Approve the given membershipId to join the group/clan as long as
        they have applied."""
        ...

    async def deny_pending_for_list(
        self,
        group_id: int,
    ) -> DenyPendingForListClientResponse:
        """Deny all of the pending users for the given group that match the
        passed-in ."""
        ...

    async def get_groups_for_member(
        self,
        filter: int,
        group_type: int,
        membership_id: int,
        membership_type: int,
    ) -> GetGroupsForMemberClientResponse:
        """Get information about the groups that a given member has joined."""
        ...

    async def recover_group_for_founder(
        self,
        group_type: int,
        membership_id: int,
        membership_type: int,
    ) -> RecoverGroupForFounderClientResponse:
        """Allows a founder to manually recover a group they can see in game
        but not on bungie.net."""
        ...

    async def get_potential_groups_for_member(
        self,
        filter: int,
        group_type: int,
        membership_id: int,
        membership_type: int,
    ) -> GetPotentialGroupsForMemberClientResponse:
        """Get information about the groups that a given member has applied to
        or been invited to."""
        ...

    async def individual_group_invite(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> IndividualGroupInviteClientResponse:
        """Invite a user to join this group."""
        ...

    async def individual_group_invite_cancel(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> IndividualGroupInviteCancelClientResponse:
        """Cancels a pending invitation to join a group."""
        ...
