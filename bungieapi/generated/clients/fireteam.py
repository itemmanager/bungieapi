# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.base import BaseClient
from bungieapi.forge import forge
from bungieapi.generated.types import (
    SearchResultOfFireteamResponse,
    SearchResultOfFireteamSummary,
)
from bungieapi.generated.types.exceptions import PlatformErrorCodes
from bungieapi.generated.types.fireteam import FireteamResponse


@dt.dataclass(frozen=True)
class GetActivePrivateClanFireteamCountClientResponse:
    response: int
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetAvailableClanFireteamsClientResponse:
    response: "SearchResultOfFireteamSummary"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class SearchPublicAvailableClanFireteamsClientResponse:
    response: "SearchResultOfFireteamSummary"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetMyClanFireteamsClientResponse:
    response: "SearchResultOfFireteamResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetClanFireteamClientResponse:
    response: "FireteamResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


class Client(BaseClient):
    async def get_active_private_clan_fireteam_count(
        self,
        group_id: int,
    ) -> GetActivePrivateClanFireteamCountClientResponse:
        """Gets a count of all active non-public fireteams for the specified
        clan.

        Maximum value returned is 25.
        Parameters:
            group_id: The group id of the clan.
        """
        query = None
        result = await self.get(
            path=f"/Fireteam/Clan/{group_id}/ActiveCount/", query=query
        )
        return forge(GetActivePrivateClanFireteamCountClientResponse, result)

    async def get_available_clan_fireteams(
        self,
        activity_type: int,
        date_range: int,
        group_id: int,
        page: int,
        platform: int,
        public_only: int,
        slot_filter: int,
        lang_filter: t.Optional[str] = None,
    ) -> GetAvailableClanFireteamsClientResponse:
        """Gets a listing of all of this clan's fireteams that are have
        available slots.

        Caller is not checked for join criteria so caching is maximized.
        Parameters:
            activity_type: The activity type to filter by.
            date_range: The date range to grab available fireteams.
            group_id: The group id of the clan.
            lang_filter: An optional language filter.
            page: Zero based page
            platform: The platform filter.
            public_only: Determines public/private filtering.
            slot_filter: Filters based on available slots
        """
        query = {"langFilter": lang_filter}
        result = await self.get(
            path=f"/Fireteam/Clan/{group_id}/Available/{platform}/{activity_type}/{date_range}/{slot_filter}/{public_only}/{page}/",
            query=query,
        )
        return forge(GetAvailableClanFireteamsClientResponse, result)

    async def search_public_available_clan_fireteams(
        self,
        activity_type: int,
        date_range: int,
        page: int,
        platform: int,
        slot_filter: int,
        lang_filter: t.Optional[str] = None,
    ) -> SearchPublicAvailableClanFireteamsClientResponse:
        """Gets a listing of all public fireteams starting now with open slots.

        Caller is not checked for join criteria so caching is maximized.
        Parameters:
            activity_type: The activity type to filter by.
            date_range: The date range to grab available fireteams.
            lang_filter: An optional language filter.
            page: Zero based page
            platform: The platform filter.
            slot_filter: Filters based on available slots
        """
        query = {"langFilter": lang_filter}
        result = await self.get(
            path=f"/Fireteam/Search/Available/{platform}/{activity_type}/{date_range}/{slot_filter}/{page}/",
            query=query,
        )
        return forge(SearchPublicAvailableClanFireteamsClientResponse, result)

    async def get_my_clan_fireteams(
        self,
        group_id: int,
        include_closed: bool,
        page: int,
        platform: int,
        group_filter: t.Optional[bool] = None,
        lang_filter: t.Optional[str] = None,
    ) -> GetMyClanFireteamsClientResponse:
        """Gets a listing of all fireteams that caller is an applicant, a
        member, or an alternate of.

        Parameters:
            group_filter: If true, filter by clan. Otherwise, ignore the clan and show all of the user's fireteams.
            group_id: The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).
            include_closed: If true, return fireteams that have been closed.
            lang_filter: An optional language filter.
            page: Deprecated parameter, ignored.
            platform: The platform filter.
        """
        query = {"groupFilter": group_filter, "langFilter": lang_filter}
        result = await self.get(
            path=f"/Fireteam/Clan/{group_id}/My/{platform}/{include_closed}/{page}/",
            query=query,
        )
        return forge(GetMyClanFireteamsClientResponse, result)

    async def get_clan_fireteam(
        self,
        fireteam_id: int,
        group_id: int,
    ) -> GetClanFireteamClientResponse:
        """Gets a specific fireteam.

        Parameters:
            fireteam_id: The unique id of the fireteam.
            group_id: The group id of the clan.
        """
        query = None
        result = await self.get(
            path=f"/Fireteam/Clan/{group_id}/Summary/{fireteam_id}/", query=query
        )
        return forge(GetClanFireteamClientResponse, result)
