# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.generated.types.config.clan_banner import ClanBannerSource
from bungieapi.generated.types.destiny import (
    DestinyComponentType,
    DestinyEquipItemResults,
)
from bungieapi.generated.types.destiny.advanced import (
    AwaAuthorizationResult,
    AwaInitializeResponse,
)
from bungieapi.generated.types.destiny.config import DestinyManifest
from bungieapi.generated.types.destiny.definitions import (
    DestinyDefinition,
    DestinyEntitySearchResult,
)
from bungieapi.generated.types.destiny.historical_stats import (
    DestinyActivityHistoryResults,
    DestinyAggregateActivityResults,
    DestinyClanAggregateStat,
    DestinyHistoricalStatsAccountResult,
    DestinyHistoricalStatsByPeriod,
    DestinyHistoricalWeaponStatsData,
    DestinyLeaderboard,
    DestinyPostGameCarnageReportData,
)
from bungieapi.generated.types.destiny.historical_stats.definitions import (
    DestinyActivityModeType,
    DestinyHistoricalStatsDefinition,
    DestinyStatsGroupType,
)
from bungieapi.generated.types.destiny.milestones import (
    DestinyMilestone,
    DestinyMilestoneContent,
    DestinyPublicMilestone,
)
from bungieapi.generated.types.destiny.responses import (
    DestinyCharacterResponse,
    DestinyCollectibleNodeDetailResponse,
    DestinyItemChangeResponse,
    DestinyItemResponse,
    DestinyLinkedProfilesResponse,
    DestinyProfileResponse,
    DestinyPublicVendorsResponse,
    DestinyVendorResponse,
    DestinyVendorsResponse,
)
from bungieapi.generated.types.exceptions import PlatformErrorCodes
from bungieapi.generated.types.user import UserInfoCard

from ...base import BaseClient


@dt.dataclass(frozen=True)
class GetDestinyManifestClientResponse:
    response: "DestinyManifest"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetDestinyEntityDefinitionClientResponse:
    response: "DestinyDefinition"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class SearchDestinyPlayerByBungieNameClientResponse:
    response: t.Sequence["UserInfoCard"]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetLinkedProfilesClientResponse:
    response: "DestinyLinkedProfilesResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetProfileClientResponse:
    response: "DestinyProfileResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetCharacterClientResponse:
    response: "DestinyCharacterResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetClanWeeklyRewardStateClientResponse:
    response: "DestinyMilestone"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetClanBannerSourceClientResponse:
    response: "ClanBannerSource"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetItemClientResponse:
    response: "DestinyItemResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetVendorsClientResponse:
    response: "DestinyVendorsResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetVendorClientResponse:
    response: "DestinyVendorResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetPublicVendorsClientResponse:
    response: "DestinyPublicVendorsResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetCollectibleNodeDetailsClientResponse:
    response: "DestinyCollectibleNodeDetailResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class TransferItemClientResponse:
    response: int
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class PullFromPostmasterClientResponse:
    response: int
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class EquipItemClientResponse:
    response: int
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class EquipItemsClientResponse:
    response: "DestinyEquipItemResults"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class SetItemLockStateClientResponse:
    response: int
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class SetQuestTrackedStateClientResponse:
    response: int
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class InsertSocketPlugClientResponse:
    response: "DestinyItemChangeResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class InsertSocketPlugFreeClientResponse:
    response: "DestinyItemChangeResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetPostGameCarnageReportClientResponse:
    response: "DestinyPostGameCarnageReportData"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class ReportOffensivePostGameCarnageReportPlayerClientResponse:
    response: int
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetHistoricalStatsDefinitionClientResponse:
    response: t.Mapping[str, "DestinyHistoricalStatsDefinition"]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetClanLeaderboardsClientResponse:
    response: t.Mapping[str, t.Mapping[str, "DestinyLeaderboard"]]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetClanAggregateStatsClientResponse:
    response: t.Sequence["DestinyClanAggregateStat"]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetLeaderboardsClientResponse:
    response: t.Mapping[str, t.Mapping[str, "DestinyLeaderboard"]]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetLeaderboardsForCharacterClientResponse:
    response: t.Mapping[str, t.Mapping[str, "DestinyLeaderboard"]]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class SearchDestinyEntitiesClientResponse:
    response: "DestinyEntitySearchResult"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetHistoricalStatsClientResponse:
    response: t.Mapping[str, "DestinyHistoricalStatsByPeriod"]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetHistoricalStatsForAccountClientResponse:
    response: "DestinyHistoricalStatsAccountResult"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetActivityHistoryClientResponse:
    response: "DestinyActivityHistoryResults"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetUniqueWeaponHistoryClientResponse:
    response: "DestinyHistoricalWeaponStatsData"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetDestinyAggregateActivityStatsClientResponse:
    response: "DestinyAggregateActivityResults"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetPublicMilestoneContentClientResponse:
    response: "DestinyMilestoneContent"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class GetPublicMilestonesClientResponse:
    response: t.Mapping[str, "DestinyPublicMilestone"]
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class AwaInitializeRequestClientResponse:
    response: "AwaInitializeResponse"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class AwaProvideAuthorizationResultClientResponse:
    response: int
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


@dt.dataclass(frozen=True)
class AwaGetActionTokenClientResponse:
    response: "AwaAuthorizationResult"
    error_code: "PlatformErrorCodes"
    throttle_seconds: int
    error_status: str
    message: str
    message_data: t.Mapping[str, str]
    detailed_error_trace: str


class Client(BaseClient):
    async def get_destiny_manifest(
        self,
    ) -> GetDestinyManifestClientResponse:
        """Returns the current version of the manifest as a json object."""
        ...

    async def get_destiny_entity_definition(
        self,
        entity_type: str,
        hash_identifier: int,
    ) -> GetDestinyEntityDefinitionClientResponse:
        """Returns the static definition of an entity of the given Type and
        hash identifier.

        Examine the API Documentation for the Type Names of entities
        that have their own definitions. Note that the return type will
        always *inherit from* DestinyDefinition, but the specific type
        returned will be the requested entity type if it can be found.
        Please don't use this as a chatty alternative to the Manifest
        database if you require large sets of data, but for simple and
        one-off accesses this should be handy.
        """
        ...

    async def search_destiny_player_by_bungie_name(
        self,
        membership_type: int,
    ) -> SearchDestinyPlayerByBungieNameClientResponse:
        """Returns a list of Destiny memberships given a global Bungie Display
        Name.

        This method will hide overridden memberships due to cross save.
        """
        ...

    async def get_linked_profiles(
        self,
        membership_id: int,
        membership_type: int,
        get_all_memberships: t.Optional[bool] = None,
    ) -> GetLinkedProfilesClientResponse:
        """Returns a summary information about all profiles linked to the
        requesting membership type/membership ID that have valid Destiny
        information.

        The passed-in Membership Type/Membership ID may be a Bungie.Net
        membership or a Destiny membership. It only returns the minimal
        amount of data to begin making more substantive requests, but
        will hopefully serve as a useful alternative to UserServices for
        people who just care about Destiny data. Note that it will only
        return linked accounts whose linkages you are allowed to view.
        """
        ...

    async def get_profile(
        self,
        destiny_membership_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence["DestinyComponentType"]] = None,
    ) -> GetProfileClientResponse:
        """Returns Destiny Profile information for the supplied membership."""
        ...

    async def get_character(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence["DestinyComponentType"]] = None,
    ) -> GetCharacterClientResponse:
        """Returns character information for the supplied character."""
        ...

    async def get_clan_weekly_reward_state(
        self,
        group_id: int,
    ) -> GetClanWeeklyRewardStateClientResponse:
        """Returns information on the weekly clan rewards and if the clan has
        earned them or not.

        Note that this will always report rewards as not redeemed.
        """
        ...

    async def get_clan_banner_source(
        self,
    ) -> GetClanBannerSourceClientResponse:
        """Returns the dictionary of values for the Clan Banner."""
        ...

    async def get_item(
        self,
        destiny_membership_id: int,
        item_instance_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence["DestinyComponentType"]] = None,
    ) -> GetItemClientResponse:
        """Retrieve the details of an instanced Destiny Item.

        An instanced Destiny item is one with an ItemInstanceId. Non-
        instanced items, such as materials, have no useful instance-
        specific details and thus are not queryable here.
        """
        ...

    async def get_vendors(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence["DestinyComponentType"]] = None,
        filter: t.Optional[int] = None,
    ) -> GetVendorsClientResponse:
        """Get currently available vendors from the list of vendors that can
        possibly have rotating inventory.

        Note that this does not include things like preview vendors and
        vendors-as-kiosks, neither of whom have rotating/dynamic
        inventories. Use their definitions as-is for those.
        """
        ...

    async def get_vendor(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        vendor_hash: int,
        components: t.Optional[t.Sequence["DestinyComponentType"]] = None,
    ) -> GetVendorClientResponse:
        """Get the details of a specific Vendor."""
        ...

    async def get_public_vendors(
        self,
        components: t.Optional[t.Sequence["DestinyComponentType"]] = None,
    ) -> GetPublicVendorsClientResponse:
        """Get items available from vendors where the vendors have items for
        sale that are common for everyone.

        If any portion of the Vendor's available inventory is character
        or account specific, we will be unable to return their data from
        this endpoint due to the way that available inventory is
        computed. As I am often guilty of saying: 'It's a long story...'
        """
        ...

    async def get_collectible_node_details(
        self,
        character_id: int,
        collectible_presentation_node_hash: int,
        destiny_membership_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence["DestinyComponentType"]] = None,
    ) -> GetCollectibleNodeDetailsClientResponse:
        """Given a Presentation Node that has Collectibles as direct
        descendants, this will return item details about those descendants in
        the context of the requesting character."""
        ...

    async def transfer_item(
        self,
    ) -> TransferItemClientResponse:
        """Transfer an item to/from your vault.

        You must have a valid Destiny account. You must also pass BOTH a
        reference AND an instance ID if it's an instanced item.
        itshappening.gif
        """
        ...

    async def pull_from_postmaster(
        self,
    ) -> PullFromPostmasterClientResponse:
        """Extract an item from the Postmaster, with whatever implications that
        may entail.

        You must have a valid Destiny account. You must also pass BOTH a
        reference AND an instance ID if it's an instanced item.
        """
        ...

    async def equip_item(
        self,
    ) -> EquipItemClientResponse:
        """Equip an item.

        You must have a valid Destiny Account, and either be in a social
        space, in orbit, or offline.
        """
        ...

    async def equip_items(
        self,
    ) -> EquipItemsClientResponse:
        """Equip a list of items by itemInstanceIds.

        You must have a valid Destiny Account, and either be in a social
        space, in orbit, or offline. Any items not found on your
        character will be ignored.
        """
        ...

    async def set_item_lock_state(
        self,
    ) -> SetItemLockStateClientResponse:
        """Set the Lock State for an instanced item.

        You must have a valid Destiny Account.
        """
        ...

    async def set_quest_tracked_state(
        self,
    ) -> SetQuestTrackedStateClientResponse:
        """Set the Tracking State for an instanced item, if that item is a
        Quest or Bounty.

        You must have a valid Destiny Account. Yeah, it's an item.
        """
        ...

    async def insert_socket_plug(
        self,
    ) -> InsertSocketPlugClientResponse:
        """Insert a plug into a socketed item.

        I know how it sounds, but I assure you it's much more G-rated
        than you might be guessing. We haven't decided yet whether this
        will be able to insert plugs that have side effects, but if we
        do it will require special scope permission for an application
        attempting to do so. You must have a valid Destiny Account, and
        either be in a social space, in orbit, or offline. Request must
        include proof of permission for 'InsertPlugs' from the account
        owner.
        """
        ...

    async def insert_socket_plug_free(
        self,
    ) -> InsertSocketPlugFreeClientResponse:
        """Insert a 'free' plug into an item's socket.

        This does not require 'Advanced Write Action' authorization and
        is available to 3rd-party apps, but will only work on 'free and
        reversible' socket actions (Perks, Armor Mods, Shaders,
        Ornaments, etc.). You must have a valid Destiny Account, and the
        character must either be in a social space, in orbit, or
        offline.
        """
        ...

    async def get_post_game_carnage_report(
        self,
        activity_id: int,
    ) -> GetPostGameCarnageReportClientResponse:
        """Gets the available post game carnage report for the activity ID."""
        ...

    async def report_offensive_post_game_carnage_report_player(
        self,
        activity_id: int,
    ) -> ReportOffensivePostGameCarnageReportPlayerClientResponse:
        """Report a player that you met in an activity that was engaging in
        ToS-violating activities.

        Both you and the offending player must have played in the
        activityId passed in. Please use this judiciously and only when
        you have strong suspicions of violation, pretty please.
        """
        ...

    async def get_historical_stats_definition(
        self,
    ) -> GetHistoricalStatsDefinitionClientResponse:
        """Gets historical stats definitions."""
        ...

    async def get_clan_leaderboards(
        self,
        group_id: int,
        maxtop: t.Optional[int] = None,
        modes: t.Optional[str] = None,
        statid: t.Optional[str] = None,
    ) -> GetClanLeaderboardsClientResponse:
        """Gets leaderboards with the signed in user's friends and the supplied
        destinyMembershipId as the focus.

        PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        """
        ...

    async def get_clan_aggregate_stats(
        self,
        group_id: int,
        modes: t.Optional[str] = None,
    ) -> GetClanAggregateStatsClientResponse:
        """Gets aggregated stats for a clan using the same categories as the
        clan leaderboards.

        PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        """
        ...

    async def get_leaderboards(
        self,
        destiny_membership_id: int,
        membership_type: int,
        maxtop: t.Optional[int] = None,
        modes: t.Optional[str] = None,
        statid: t.Optional[str] = None,
    ) -> GetLeaderboardsClientResponse:
        """Gets leaderboards with the signed in user's friends and the supplied
        destinyMembershipId as the focus.

        PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        """
        ...

    async def get_leaderboards_for_character(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        maxtop: t.Optional[int] = None,
        modes: t.Optional[str] = None,
        statid: t.Optional[str] = None,
    ) -> GetLeaderboardsForCharacterClientResponse:
        """Gets leaderboards with the signed in user's friends and the supplied
        destinyMembershipId as the focus.

        PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        """
        ...

    async def search_destiny_entities(
        self,
        search_term: str,
        type: str,
        page: t.Optional[int] = None,
    ) -> SearchDestinyEntitiesClientResponse:
        """Gets a page list of Destiny items."""
        ...

    async def get_historical_stats(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        dayend: t.Optional[str] = None,
        daystart: t.Optional[str] = None,
        groups: t.Optional[t.Sequence["DestinyStatsGroupType"]] = None,
        modes: t.Optional[t.Sequence["DestinyActivityModeType"]] = None,
        period_type: t.Optional[int] = None,
    ) -> GetHistoricalStatsClientResponse:
        """Gets historical stats for indicated character."""
        ...

    async def get_historical_stats_for_account(
        self,
        destiny_membership_id: int,
        membership_type: int,
        groups: t.Optional[t.Sequence["DestinyStatsGroupType"]] = None,
    ) -> GetHistoricalStatsForAccountClientResponse:
        """Gets aggregate historical stats organized around each character for
        a given account."""
        ...

    async def get_activity_history(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        count: t.Optional[int] = None,
        mode: t.Optional[int] = None,
        page: t.Optional[int] = None,
    ) -> GetActivityHistoryClientResponse:
        """Gets activity history stats for indicated character."""
        ...

    async def get_unique_weapon_history(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
    ) -> GetUniqueWeaponHistoryClientResponse:
        """Gets details about unique weapon usage, including all exotic
        weapons."""
        ...

    async def get_destiny_aggregate_activity_stats(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
    ) -> GetDestinyAggregateActivityStatsClientResponse:
        """Gets all activities the character has participated in together with
        aggregate statistics for those activities."""
        ...

    async def get_public_milestone_content(
        self,
        milestone_hash: int,
    ) -> GetPublicMilestoneContentClientResponse:
        """Gets custom localized content for the milestone of the given hash,
        if it exists."""
        ...

    async def get_public_milestones(
        self,
    ) -> GetPublicMilestonesClientResponse:
        """Gets public information about currently available Milestones."""
        ...

    async def awa_initialize_request(
        self,
    ) -> AwaInitializeRequestClientResponse:
        """Initialize a request to perform an advanced write action."""
        ...

    async def awa_provide_authorization_result(
        self,
    ) -> AwaProvideAuthorizationResultClientResponse:
        """Provide the result of the user interaction.

        Called by the Bungie Destiny App to approve or reject a request.
        """
        ...

    async def awa_get_action_token(
        self,
        correlation_id: str,
    ) -> AwaGetActionTokenClientResponse:
        """Returns the action token if user approves the request."""
        ...
