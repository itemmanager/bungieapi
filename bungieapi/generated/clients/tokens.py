# generated by update to not change manually
from bungieapi.base import BaseClient, clean_query_value
from bungieapi.forge import forge
from bungieapi.generated.components.responses import (
    CEListOfPartnerOfferSkuHistoryClientResponse,
    DictionaryOfstringAndBungieRewardDisplayClientResponse,
    booleanClientResponse,
)
from bungieapi.generated.components.responses.tokens import (
    PartnerRewardHistoryClientResponse,
)
from bungieapi.generated.components.schemas import BungieMembershipType
from bungieapi.generated.components.schemas.tokens import PartnerOfferClaimRequest


class Client(BaseClient):
    async def force_drops_repair(
        self,
    ) -> booleanClientResponse:
        """Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them."""
        query = None
        result = await self.post(
            path="/Tokens/Partner/ForceDropsRepair/",
            query=query,
        )
        return forge(booleanClientResponse, result)

    async def claim_partner_offer(
        self,
        request: "PartnerOfferClaimRequest",
    ) -> booleanClientResponse:
        """Claim a partner offer as the authenticated user."""
        query = None
        result = await self.post(
            path="/Tokens/Partner/ClaimOffer/", query=query, request=request
        )
        return forge(booleanClientResponse, result)

    async def apply_missing_partner_offers_without_claim(
        self,
        partner_application_id: int,
        target_bnet_membership_id: int,
    ) -> booleanClientResponse:
        """Apply a partner offer to the targeted user.

        This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
        Parameters:
            partner_application_id: The partner application identifier.
            target_bnet_membership_id: The bungie.net user to apply missing offers to. If not self, elevated permissions are required.
        """
        query = None
        result = await self.post(
            path=f"/Tokens/Partner/ApplyMissingOffers/{clean_query_value(partner_application_id)}/{clean_query_value(target_bnet_membership_id)}/",
            query=query,
        )
        return forge(booleanClientResponse, result)

    async def get_partner_offer_sku_history(
        self,
        partner_application_id: int,
        target_bnet_membership_id: int,
    ) -> CEListOfPartnerOfferSkuHistoryClientResponse:
        """Returns the partner sku and offer history of the targeted user.

        Elevated permissions are required to see users that are not yourself.
        Parameters:
            partner_application_id: The partner application identifier.
            target_bnet_membership_id: The bungie.net user to apply missing offers to. If not self, elevated permissions are required.
        """
        query = None
        result = await self.get(
            path=f"/Tokens/Partner/History/{clean_query_value(partner_application_id)}/{clean_query_value(target_bnet_membership_id)}/",
            query=query,
        )
        return forge(CEListOfPartnerOfferSkuHistoryClientResponse, result)

    async def get_partner_reward_history(
        self,
        partner_application_id: int,
        target_bnet_membership_id: int,
    ) -> PartnerRewardHistoryClientResponse:
        """Returns the partner rewards history of the targeted user, both
        partner offers and Twitch drops.

        Parameters:
            partner_application_id: The partner application identifier.
            target_bnet_membership_id: The bungie.net user to return reward history for.
        """
        query = None
        result = await self.get(
            path=f"/Tokens/Partner/History/{clean_query_value(target_bnet_membership_id)}/Application/{clean_query_value(partner_application_id)}/",
            query=query,
        )
        return forge(PartnerRewardHistoryClientResponse, result)

    async def get_bungie_rewards_for_user(
        self,
        membership_id: int,
    ) -> DictionaryOfstringAndBungieRewardDisplayClientResponse:
        """Returns the bungie rewards for the targeted user.

        Parameters:
            membership_id: bungie.net user membershipId for requested user rewards. If not self, elevated permissions are required.
        """
        query = None
        result = await self.get(
            path=f"/Tokens/Rewards/GetRewardsForUser/{clean_query_value(membership_id)}/",
            query=query,
        )
        return forge(DictionaryOfstringAndBungieRewardDisplayClientResponse, result)

    async def get_bungie_rewards_for_platform_user(
        self,
        membership_id: int,
        membership_type: "BungieMembershipType",
    ) -> DictionaryOfstringAndBungieRewardDisplayClientResponse:
        """Returns the bungie rewards for the targeted user when a platform
        membership Id and Type are used.

        Parameters:
            membership_id: users platform membershipId for requested user rewards. If not self, elevated permissions are required.
            membership_type: The target Destiny 2 membership type.
        """
        query = None
        result = await self.get(
            path=f"/Tokens/Rewards/GetRewardsForPlatformUser/{clean_query_value(membership_id)}/{clean_query_value(membership_type)}/",
            query=query,
        )
        return forge(DictionaryOfstringAndBungieRewardDisplayClientResponse, result)

    async def get_bungie_rewards_list(
        self,
    ) -> DictionaryOfstringAndBungieRewardDisplayClientResponse:
        """Returns a list of the current bungie rewards."""
        query = None
        result = await self.get(
            path="/Tokens/Rewards/BungieRewards/",
            query=query,
        )
        return forge(DictionaryOfstringAndBungieRewardDisplayClientResponse, result)
