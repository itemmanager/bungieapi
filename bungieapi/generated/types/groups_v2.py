# generated by update to not change manually
import dataclasses as dt
import typing as t
from enum import Enum


@dt.dataclass(frozen=True)
class GroupUserInfoCard:
    last_seen_display_name: str
    last_seen_display_name_type: "BungieMembershipType"
    supplemental_display_name: str
    icon_path: str
    cross_save_override: "BungieMembershipType"
    applicable_membership_types: t.Sequence["BungieMembershipType"]
    is_public: bool
    membership_type: "BungieMembershipType"
    membership_id: int
    display_name: str
    bungie_global_display_name: str
    bungie_global_display_name_code: int


@dt.dataclass(frozen=True)
class GroupResponse:
    detail: "GroupV2"
    founder: "GroupMember"
    allied_ids: t.Sequence[int]
    parent_group: "GroupV2"
    alliance_status: "GroupAllianceStatus"
    group_join_invite_count: int
    current_user_memberships_inactive_for_destiny: bool
    current_user_member_map: t.Mapping[str, "GroupMember"]
    current_user_potential_member_map: t.Mapping[str, "GroupPotentialMember"]


@dt.dataclass(frozen=True)
class GroupV2:
    group_id: int
    name: str
    group_type: "GroupType"
    membership_id_created: int
    creation_date: str
    modification_date: str
    about: str
    tags: t.Sequence[str]
    member_count: int
    is_public: bool
    is_public_topic_admin_only: bool
    motto: str
    allow_chat: bool
    is_default_post_public: bool
    chat_security: "ChatSecuritySetting"
    locale: str
    avatar_image_index: int
    homepage: "GroupHomepage"
    membership_option: "MembershipOption"
    default_publicity: "GroupPostPublicity"
    theme: str
    banner_path: str
    avatar_path: str
    conversation_id: int
    enable_invitation_messaging_for_admins: bool
    ban_expire_date: str
    features: "GroupFeatures"
    clan_info: "GroupV2ClanInfoAndInvestment"


class GroupType(Enum):
    GENERAL = 0
    CLAN = 1


class ChatSecuritySetting(Enum):
    GROUP = 0
    ADMINS = 1


class GroupHomepage(Enum):
    WALL = 0
    FORUM = 1
    ALLIANCE_FORUM = 2


class MembershipOption(Enum):
    REVIEWED = 0
    OPEN = 1
    CLOSED = 2


class GroupPostPublicity(Enum):
    PUBLIC = 0
    ALLIANCE = 1
    PRIVATE = 2


@dt.dataclass(frozen=True)
class GroupFeatures:
    maximum_members: int
    maximum_memberships_of_group_type: int
    capabilities: "Capabilities"
    membership_types: t.Sequence["BungieMembershipType"]
    invite_permission_override: bool
    update_culture_permission_override: bool
    host_guided_game_permission_override: "HostGuidedGamesPermissionLevel"
    update_banner_permission_override: bool
    join_level: "RuntimeGroupMemberType"


class Capabilities(Enum):
    NONE = 0
    LEADERBOARDS = 1
    CALLSIGN = 2
    OPTIONAL_CONVERSATIONS = 4
    CLAN_BANNER = 8
    D2_INVESTMENT_DATA = 16
    TAGS = 32
    ALLIANCES = 64


class HostGuidedGamesPermissionLevel(Enum):
    """Used for setting the guided game permission level override (admins and
    founders can always host guided games)."""

    NONE = 0
    BEGINNER = 1
    MEMBER = 2


class RuntimeGroupMemberType(Enum):
    """The member levels used by all V2 Groups API.

    Individual group types use their own mappings in their native
    storage (general uses BnetDbGroupMemberType and D2 clans use
    ClanMemberLevel), but they are all translated to this in the runtime
    api. These runtime values should NEVER be stored anywhere, so the
    values can be changed as necessary.
    """

    NONE = 0
    BEGINNER = 1
    MEMBER = 2
    ADMIN = 3
    ACTING_FOUNDER = 4
    FOUNDER = 5


@dt.dataclass(frozen=True)
class GroupV2ClanInfo:
    """'This contract contains clan-specific group information.

    It does not include any investment data.
    """

    clan_callsign: str
    clan_banner_data: "ClanBanner"


@dt.dataclass(frozen=True)
class ClanBanner:
    decal_id: int
    decal_color_id: int
    decal_background_color_id: int
    gonfalon_id: int
    gonfalon_color_id: int
    gonfalon_detail_id: int
    gonfalon_detail_color_id: int


@dt.dataclass(frozen=True)
class GroupV2ClanInfoAndInvestment:
    """'The same as GroupV2ClanInfo, but includes any investment data."""

    d2_clan_progressions: t.Mapping[str, "DestinyProgression"]
    clan_callsign: str
    clan_banner_data: "ClanBanner"


@dt.dataclass(frozen=True)
class GroupUserBase:
    group_id: int
    destiny_user_info: "GroupUserInfoCard"
    bungie_net_user_info: "UserInfoCard"
    join_date: str


@dt.dataclass(frozen=True)
class GroupMember:
    member_type: "RuntimeGroupMemberType"
    is_online: bool
    last_online_status_change: int
    group_id: int
    destiny_user_info: "GroupUserInfoCard"
    bungie_net_user_info: "UserInfoCard"
    join_date: str


class GroupAllianceStatus(Enum):
    UNALLIED = 0
    PARENT = 1
    CHILD = 2


@dt.dataclass(frozen=True)
class GroupPotentialMember:
    potential_status: "GroupPotentialMemberStatus"
    group_id: int
    destiny_user_info: "GroupUserInfoCard"
    bungie_net_user_info: "UserInfoCard"
    join_date: str


class GroupPotentialMemberStatus(Enum):
    NONE = 0
    APPLICANT = 1
    INVITEE = 2


class GroupDateRange(Enum):
    ALL = 0
    PAST_DAY = 1
    PAST_WEEK = 2
    PAST_MONTH = 3
    PAST_YEAR = 4


@dt.dataclass(frozen=True)
class GroupV2Card:
    """'A small infocard of group information, usually used for when a list of
    groups are returned."""

    group_id: int
    name: str
    group_type: "GroupType"
    creation_date: str
    about: str
    motto: str
    member_count: int
    locale: str
    membership_option: "MembershipOption"
    capabilities: "Capabilities"
    clan_info: "GroupV2ClanInfo"
    avatar_path: str
    theme: str


@dt.dataclass(frozen=True)
class GroupSearchResponse:
    results: t.Sequence["GroupV2Card"]
    total_results: int
    has_more: bool
    query: "PagedQuery"
    replacement_continuation_token: str
    use_total_results: bool


@dt.dataclass(frozen=True)
class GroupQuery:
    """ 'NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible "modes".
    If you are querying for a group, you can pass any of the properties below.
    If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):
    - groupMemberCountFilter - localeFilter - tagText
    If you pass these, you will get a useless InvalidParameters error."""

    name: str
    group_type: "GroupType"
    creation_date: "GroupDateRange"
    sort_by: "GroupSortBy"
    group_member_count_filter: int
    locale_filter: str
    tag_text: str
    items_per_page: int
    current_page: int
    request_continuation_token: str


class GroupSortBy(Enum):
    NAME = 0
    DATE = 1
    POPULARITY = 2
    ID = 3


class GroupMemberCountFilter(Enum):
    ALL = 0
    ONE_TO_TEN = 1
    ELEVEN_TO_ONE_HUNDRED = 2
    GREATER_THAN_ONE_HUNDRED = 3


@dt.dataclass(frozen=True)
class GroupNameSearchRequest:
    group_name: str
    group_type: "GroupType"


@dt.dataclass(frozen=True)
class GroupOptionalConversation:
    group_id: int
    conversation_id: int
    chat_enabled: bool
    chat_name: str
    chat_security: "ChatSecuritySetting"


@dt.dataclass(frozen=True)
class GroupEditAction:
    name: str
    about: str
    motto: str
    theme: str
    avatar_image_index: int
    tags: str
    is_public: bool
    membership_option: int
    is_public_topic_admin_only: bool
    allow_chat: bool
    chat_security: int
    callsign: str
    locale: str
    homepage: int
    enable_invitation_messaging_for_admins: bool
    default_publicity: int


@dt.dataclass(frozen=True)
class GroupOptionsEditAction:
    invite_permission_override: bool
    update_culture_permission_override: bool
    host_guided_game_permission_override: int
    update_banner_permission_override: bool
    join_level: int


@dt.dataclass(frozen=True)
class GroupOptionalConversationAddRequest:
    chat_name: str
    chat_security: "ChatSecuritySetting"


@dt.dataclass(frozen=True)
class GroupOptionalConversationEditRequest:
    chat_enabled: bool
    chat_name: str
    chat_security: int


@dt.dataclass(frozen=True)
class GroupMemberLeaveResult:
    group: "GroupV2"
    group_deleted: bool


@dt.dataclass(frozen=True)
class GroupBanRequest:
    comment: str
    length: "IgnoreLength"


@dt.dataclass(frozen=True)
class GroupBan:
    group_id: int
    last_modified_by: "UserInfoCard"
    created_by: "UserInfoCard"
    date_banned: str
    date_expires: str
    comment: str
    bungie_net_user_info: "UserInfoCard"
    destiny_user_info: "GroupUserInfoCard"


@dt.dataclass(frozen=True)
class GroupMemberApplication:
    group_id: int
    creation_date: str
    resolve_state: "GroupApplicationResolveState"
    resolve_date: str
    resolved_by_membership_id: int
    request_message: str
    resolve_message: str
    destiny_user_info: "GroupUserInfoCard"
    bungie_net_user_info: "UserInfoCard"


class GroupApplicationResolveState(Enum):
    UNRESOLVED = 0
    ACCEPTED = 1
    DENIED = 2
    RESCINDED = 3


@dt.dataclass(frozen=True)
class GroupApplicationRequest:
    message: str


@dt.dataclass(frozen=True)
class GroupApplicationListRequest:
    memberships: t.Sequence["UserMembership"]
    message: str


class GroupsForMemberFilter(Enum):
    ALL = 0
    FOUNDED = 1
    NON_FOUNDED = 2


@dt.dataclass(frozen=True)
class GroupMembershipBase:
    group: "GroupV2"


@dt.dataclass(frozen=True)
class GroupMembership:
    member: "GroupMember"
    group: "GroupV2"


@dt.dataclass(frozen=True)
class GroupMembershipSearchResponse:
    results: t.Sequence["GroupMembership"]
    total_results: int
    has_more: bool
    query: "PagedQuery"
    replacement_continuation_token: str
    use_total_results: bool


@dt.dataclass(frozen=True)
class GetGroupsForMemberResponse:
    are_all_memberships_inactive: t.Mapping[str, bool]
    results: t.Sequence["GroupMembership"]
    total_results: int
    has_more: bool
    query: "PagedQuery"
    replacement_continuation_token: str
    use_total_results: bool


@dt.dataclass(frozen=True)
class GroupPotentialMembership:
    member: "GroupPotentialMember"
    group: "GroupV2"


@dt.dataclass(frozen=True)
class GroupPotentialMembershipSearchResponse:
    results: t.Sequence["GroupPotentialMembership"]
    total_results: int
    has_more: bool
    query: "PagedQuery"
    replacement_continuation_token: str
    use_total_results: bool


@dt.dataclass(frozen=True)
class GroupApplicationResponse:
    resolution: "GroupApplicationResolveState"


# imported at the end to do not case circular imports for type annotations
from bungieapi.generated.types import BungieMembershipType  # noqa: E402
from bungieapi.generated.types.destiny import DestinyProgression  # noqa: E402
from bungieapi.generated.types.ignores import IgnoreLength  # noqa: E402
from bungieapi.generated.types.queries import PagedQuery  # noqa: E402
from bungieapi.generated.types.user import UserInfoCard  # noqa: E402
from bungieapi.generated.types.user import UserMembership  # noqa: E402
