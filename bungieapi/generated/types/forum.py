# generated by update to not change manually
import dataclasses as dt
import typing as t
from enum import Enum


class ForumTopicsCategoryFiltersEnum(Enum):
    NONE = 0
    LINKS = 1
    QUESTIONS = 2
    ANSWERED_QUESTIONS = 4
    MEDIA = 8
    TEXT_ONLY = 16
    ANNOUNCEMENT = 32
    BUNGIE_OFFICIAL = 64
    POLLS = 128


class ForumTopicsQuickDateEnum(Enum):
    ALL = 0
    LAST_YEAR = 1
    LAST_MONTH = 2
    LAST_WEEK = 3
    LAST_DAY = 4


class ForumTopicsSortEnum(Enum):
    DEFAULT = 0
    LAST_REPLIED = 1
    MOST_REPLIED = 2
    POPULARITY = 3
    CONTROVERSIALITY = 4
    LIKED = 5
    HIGHEST_RATED = 6
    MOST_UPVOTED = 7


@dt.dataclass(frozen=True)
class PostResponse:
    last_reply_timestamp: str
    is_pinned: bool
    url_media_type: "ForumMediaType"
    thumbnail: str
    popularity: "ForumPostPopularity"
    is_active: bool
    is_announcement: bool
    user_rating: int
    user_has_rated: bool
    user_has_muted_post: bool
    latest_reply_post_id: int
    latest_reply_author_id: int
    ignore_status: "IgnoreResponse"
    locale: str


class ForumMediaType(Enum):
    NONE = 0
    IMAGE = 1
    VIDEO = 2
    YOUTUBE = 3


class ForumPostPopularity(Enum):
    EMPTY = 0
    DEFAULT = 1
    DISCUSSED = 2
    COOL_STORY = 3
    HEATING_UP = 4
    HOT = 5


@dt.dataclass(frozen=True)
class PostSearchResponse:
    related_posts: t.Sequence["PostResponse"]
    authors: t.Sequence["GeneralUser"]
    groups: t.Sequence["GroupResponse"]
    searched_tags: t.Sequence["TagResponse"]
    polls: t.Sequence["PollResponse"]
    recruitment_details: t.Sequence["ForumRecruitmentDetail"]
    available_pages: int
    results: t.Sequence["PostResponse"]
    total_results: int
    has_more: bool
    query: "PagedQuery"
    replacement_continuation_token: str
    use_total_results: bool  # If useTotalResults is true, then totalResults represents an accurate count. If False, it does not, and may be estimated/only the size of the current page. Either way, you should probably always only trust hasMore. This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.


@dt.dataclass(frozen=True)
class PollResponse:
    topic_id: int
    results: t.Sequence["PollResult"]
    total_votes: int


@dt.dataclass(frozen=True)
class PollResult:
    answer_text: str
    answer_slot: int
    last_vote_date: str
    votes: int
    requesting_user_voted: bool


@dt.dataclass(frozen=True)
class ForumRecruitmentDetail:
    topic_id: int
    microphone_required: bool
    intensity: "ForumRecruitmentIntensityLabel"
    tone: "ForumRecruitmentToneLabel"
    approved: bool
    conversation_id: int
    player_slots_total: int
    player_slots_remaining: int
    fireteam: t.Sequence["GeneralUser"]
    kicked_player_ids: t.Sequence[int]


class ForumRecruitmentIntensityLabel(Enum):
    NONE = 0
    CASUAL = 1
    PROFESSIONAL = 2


class ForumRecruitmentToneLabel(Enum):
    NONE = 0
    FAMILY_FRIENDLY = 1
    ROWDY = 2


class ForumPostSortEnum(Enum):
    DEFAULT = 0
    OLDEST_FIRST = 1


class CommunityContentSortMode(Enum):
    TRENDING = 0
    LATEST = 1
    HIGHEST_RATED = 2


from bungieapi.generated.types.groups_v2 import GroupResponse  # noqa: E402

# imported at the end to do not case circular imports for type annotations
from bungieapi.generated.types.ignores import IgnoreResponse  # noqa: E402
from bungieapi.generated.types.queries import PagedQuery  # noqa: E402
from bungieapi.generated.types.tags.models.contracts import TagResponse  # noqa: E402
from bungieapi.generated.types.user import GeneralUser  # noqa: E402
