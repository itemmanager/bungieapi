# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.generated.types import BungieMembershipType
from bungieapi.generated.types.groups_v2 import GroupUserInfoCard
from bungieapi.generated.types.ignores import IgnoreResponse


@dt.dataclass(frozen=True)
class UserMembership:
    """'Very basic info about a user as returned by the Account server."""

    membership_type: BungieMembershipType
    membership_id: int
    display_name: str
    bungie_global_display_name: str
    bungie_global_display_name_code: int


@dt.dataclass(frozen=True)
class CrossSaveUserMembership:
    """'Very basic info about a user as returned by the Account server, but
    including CrossSave information.

    Do NOT use as a request contract.
    """

    cross_save_override: BungieMembershipType
    applicable_membership_types: t.Sequence[BungieMembershipType]
    is_public: bool
    membership_type: BungieMembershipType
    membership_id: int
    display_name: str
    bungie_global_display_name: str
    bungie_global_display_name_code: int


@dt.dataclass(frozen=True)
class UserInfoCard:
    """'This contract supplies basic information commonly used to display a
    minimal amount of information about a user.

    Take care to not add more properties here unless the property
    applies in all (or at least the majority) of the situations where
    UserInfoCard is used. Avoid adding game specific or platform
    specific details here. In cases where UserInfoCard is a subset of
    the data needed in a contract, use UserInfoCard as a property of
    other contracts.
    """

    supplemental_display_name: str
    icon_path: str
    cross_save_override: BungieMembershipType
    applicable_membership_types: t.Sequence[BungieMembershipType]
    is_public: bool
    membership_type: BungieMembershipType
    membership_id: int
    display_name: str
    bungie_global_display_name: str
    bungie_global_display_name_code: int


@dt.dataclass(frozen=True)
class GeneralUser:
    membership_id: int
    unique_name: str
    normalized_name: str
    display_name: str
    profile_picture: int
    profile_theme: int
    user_title: int
    success_message_flags: int
    is_deleted: bool
    about: str
    first_access: str
    last_update: str
    legacy_portal_uid: int
    context: "UserToUserContext"
    psn_display_name: str
    xbox_display_name: str
    fb_display_name: str
    show_activity: bool
    locale: str
    locale_inherit_default: bool
    last_ban_report_id: int
    show_group_messaging: bool
    profile_picture_path: str
    profile_picture_wide_path: str
    profile_theme_name: str
    user_title_display: str
    status_text: str
    status_date: str
    profile_ban_expire: str
    blizzard_display_name: str
    steam_display_name: str
    stadia_display_name: str
    twitch_display_name: str
    cached_bungie_global_display_name: str
    cached_bungie_global_display_name_code: int


@dt.dataclass(frozen=True)
class UserToUserContext:
    is_following: bool
    ignore_status: IgnoreResponse
    global_ignore_end_date: str


@dt.dataclass(frozen=True)
class UserMembershipData:
    destiny_memberships: t.Sequence[GroupUserInfoCard]
    primary_membership_id: int
    bungie_net_user: "GeneralUser"


@dt.dataclass(frozen=True)
class HardLinkedUserMembership:
    membership_type: BungieMembershipType
    membership_id: int
    cross_save_overridden_type: BungieMembershipType
    cross_save_overridden_membership_id: int


@dt.dataclass(frozen=True)
class UserSearchResponse:
    search_results: t.Sequence["UserSearchResponseDetail"]
    page: int
    has_more: bool


@dt.dataclass(frozen=True)
class UserSearchResponseDetail:
    bungie_global_display_name: str
    bungie_global_display_name_code: int
    bungie_net_membership_id: int
    destiny_memberships: t.Sequence["UserInfoCard"]


@dt.dataclass(frozen=True)
class UserSearchPrefixRequest:
    display_name_prefix: str


@dt.dataclass(frozen=True)
class ExactSearchRequest:
    display_name: str
    display_name_code: int


@dt.dataclass(frozen=True)
class EmailSettings:
    """'The set of all email subscription/opt-in settings and definitions."""

    opt_in_definitions: t.Mapping[str, "EmailOptInDefinition"]
    subscription_definitions: t.Mapping[str, "EmailSubscriptionDefinition"]
    views: t.Mapping[str, "EmailViewDefinition"]


@dt.dataclass(frozen=True)
class EmailOptInDefinition:
    """'Defines a single opt-in category: a wide-scoped permission to send
    emails for the subject related to the opt-in."""

    name: str
    value: "OptInFlags"
    set_by_default: bool
    dependent_subscriptions: t.Sequence["EmailSubscriptionDefinition"]


OptInFlags = t.Any


@dt.dataclass(frozen=True)
class EmailSubscriptionDefinition:
    """'Defines a single subscription: permission to send emails for a
    specific, focused subject (generally timeboxed, such as for a specific
    release of a product or feature)."""

    name: str
    localization: t.Mapping[str, "EMailSettingSubscriptionLocalization"]
    value: int


@dt.dataclass(frozen=True)
class EMailSettingLocalization:
    """'Localized text relevant to a given EMail setting in a given
    localization."""

    title: str
    description: str


@dt.dataclass(frozen=True)
class EMailSettingSubscriptionLocalization:
    """'Localized text relevant to a given EMail setting in a given
    localization.

    Extra settings specifically for subscriptions.
    """

    unknown_user_description: str
    registered_user_description: str
    unregistered_user_description: str
    unknown_user_action_text: str
    known_user_action_text: str
    title: str
    description: str


@dt.dataclass(frozen=True)
class EmailViewDefinition:
    """'Represents a data-driven view for Email settings.

    Web/Mobile UI can use this data to show new EMail settings
    consistently without further manual work.
    """

    name: str
    view_settings: t.Sequence["EmailViewDefinitionSetting"]


@dt.dataclass(frozen=True)
class EmailViewDefinitionSetting:
    name: str
    localization: t.Mapping[str, "EMailSettingLocalization"]
    set_by_default: bool
    opt_in_aggregate_value: "OptInFlags"
    subscriptions: t.Sequence["EmailSubscriptionDefinition"]
