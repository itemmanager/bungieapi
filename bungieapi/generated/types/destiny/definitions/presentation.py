# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.generated.types.destiny import (DestinyPresentationDisplayStyle,
                                               DestinyPresentationNodeType,
                                               DestinyPresentationScreenStyle,
                                               DestinyScope)
from bungieapi.generated.types.destiny.definitions.common import \
    DestinyDisplayPropertiesDefinition


@dt.dataclass(frozen=True)
class DestinyPresentationNodeBaseDefinition:
    """'This is the base class for all presentation system children.

    Presentation Nodes, Records, Collectibles, and Metrics.
    """

    presentation_node_type: DestinyPresentationNodeType
    trait_ids: t.Sequence[str]
    trait_hashes: t.Sequence[int]
    parent_node_hashes: t.Sequence[int]
    hash: int
    index: int
    redacted: bool


@dt.dataclass(frozen=True)
class DestinyScoredPresentationNodeBaseDefinition:
    max_category_record_score: int
    presentation_node_type: DestinyPresentationNodeType
    trait_ids: t.Sequence[str]
    trait_hashes: t.Sequence[int]
    parent_node_hashes: t.Sequence[int]
    hash: int
    index: int
    redacted: bool


@dt.dataclass(frozen=True)
class DestinyPresentationNodeDefinition:
    """'A PresentationNode is an entity that represents a logical grouping of
    other entities visually/organizationally. For now, Presentation Nodes may
    contain the following... but it may be used for more in the future:

    - Collectibles - Records (Or, as the public will call them, "Triumphs." Don't ask me why we're overloading the term "Triumph", it still hurts me to think about it) - Metrics (aka Stat Trackers) - Other Presentation Nodes, allowing a tree of Presentation Nodes to be created
    Part of me wants to break these into conceptual definitions per entity being collected, but the possibility of these different types being mixed in the same UI and the possibility that it could actually be more useful to return the "bare metal" presentation node concept has resulted in me deciding against that for the time being.
    We'll see if I come to regret this as well.
    """

    display_properties: DestinyDisplayPropertiesDefinition
    original_icon: str
    root_view_icon: str
    node_type: DestinyPresentationNodeType
    scope: DestinyScope
    objective_hash: int
    completion_record_hash: int
    children: t.Any
    display_style: DestinyPresentationDisplayStyle
    screen_style: DestinyPresentationScreenStyle
    requirements: t.Any
    disable_child_subscreen_navigation: bool
    max_category_record_score: int
    presentation_node_type: DestinyPresentationNodeType
    trait_ids: t.Sequence[str]
    trait_hashes: t.Sequence[int]
    parent_node_hashes: t.Sequence[int]
    hash: int
    index: int
    redacted: bool


@dt.dataclass(frozen=True)
class DestinyPresentationNodeChildrenBlock:
    """'As/if presentation nodes begin to host more entities as children, these
    lists will be added to.

    One list property exists per type of entity that can be treated as a
    child of this presentation node, and each holds the identifier of
    the entity and any associated information needed to display the UI
    for that entity (if anything)
    """

    presentation_nodes: t.Sequence["DestinyPresentationNodeChildEntry"]
    collectibles: t.Sequence["DestinyPresentationNodeCollectibleChildEntry"]
    records: t.Sequence["DestinyPresentationNodeRecordChildEntry"]
    metrics: t.Sequence["DestinyPresentationNodeMetricChildEntry"]


@dt.dataclass(frozen=True)
class DestinyPresentationNodeChildEntry:
    presentation_node_hash: int


@dt.dataclass(frozen=True)
class DestinyPresentationNodeCollectibleChildEntry:
    collectible_hash: int


@dt.dataclass(frozen=True)
class DestinyPresentationNodeRequirementsBlock:
    """'Presentation nodes can be restricted by various requirements.

    This defines the rules of those requirements, and the message(s) to
    be shown if these requirements aren't met.
    """

    entitlement_unavailable_message: str


@dt.dataclass(frozen=True)
class DestinyPresentationChildBlock:
    presentation_node_type: DestinyPresentationNodeType
    parent_presentation_node_hashes: t.Sequence[int]
    display_style: DestinyPresentationDisplayStyle


@dt.dataclass(frozen=True)
class DestinyPresentationNodeRecordChildEntry:
    record_hash: int


@dt.dataclass(frozen=True)
class DestinyPresentationNodeMetricChildEntry:
    metric_hash: int
