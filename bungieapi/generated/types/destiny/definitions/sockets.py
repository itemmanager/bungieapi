# generated by update to not change manually
import dataclasses as dt
import typing as t


@dt.dataclass(frozen=True)
class DestinySocketTypeDefinition:
    """'All Sockets have a "Type": a set of common properties that determine
    when the socket allows Plugs to be inserted, what Categories of Plugs can
    be inserted, and whether the socket is even visible at all given the
    current game/character/account state.

    See DestinyInventoryItemDefinition for more information about
    Socketed items and Plugs.
    """

    display_properties: t.Any
    insert_action: t.Any
    plug_whitelist: t.Sequence["DestinyPlugWhitelistEntryDefinition"]
    socket_category_hash: int
    visibility: "DestinySocketVisibility"
    always_randomize_sockets: bool
    is_preview_enabled: bool
    hide_duplicate_reusable_plugs: bool
    overrides_ui_appearance: bool
    avoid_duplicates_on_initialization: bool
    currency_scalars: t.Sequence["DestinySocketTypeScalarMaterialRequirementEntry"]
    hash: int
    index: int
    redacted: bool


@dt.dataclass(frozen=True)
class DestinyInsertPlugActionDefinition:
    """'Data related to what happens while a plug is being inserted, mostly for
    UI purposes."""

    action_execute_seconds: int
    action_type: "SocketTypeActionType"


@dt.dataclass(frozen=True)
class DestinyPlugWhitelistEntryDefinition:
    """'Defines a plug "Category" that is allowed to be plugged into a socket
    of this type.

    This should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item's category.
    """

    category_hash: int
    category_identifier: str
    reinitialization_possible_plug_hashes: t.Sequence[int]


@dt.dataclass(frozen=True)
class DestinySocketTypeScalarMaterialRequirementEntry:
    currency_item_hash: int
    scalar_value: int


@dt.dataclass(frozen=True)
class DestinySocketCategoryDefinition:
    """'Sockets on an item are organized into Categories visually.

    You can find references to the socket category defined on an item's DestinyInventoryItemDefinition.sockets.socketCategories property.
    This has the display information for rendering the categories' header, and a hint for how the UI should handle showing this category.
    The shitty thing about this, however, is that the socket categories' UI style can be overridden by the item's UI style. For instance, the Socket Category used by Emote Sockets says it's "consumable," but that's a lie: they're all reusable, and overridden by the detail UI pages in ways that we can't easily account for in the API.
    As a result, I will try to compile these rules into the individual sockets on items, and provide the best hint possible there through the plugSources property. In the future, I may attempt to use this information in conjunction with the item to provide a more usable UI hint on the socket layer, but for now improving the consistency of plugSources is the best I have time to provide. (See https://github.com/Bungie-net/api/issues/522 for more info)
    """

    display_properties: "DestinyDisplayPropertiesDefinition"
    ui_category_style: int
    category_style: "DestinySocketCategoryStyle"
    hash: int
    index: int
    redacted: bool


@dt.dataclass(frozen=True)
class DestinyPlugSetDefinition:
    """'Sometimes, we have large sets of reusable plugs that are defined
    identically and thus can (and in some cases, are so large that they *must*)
    be shared across the places where they are used. These are the definitions
    for those reusable sets of plugs. See
    DestinyItemSocketEntryDefinition.plugSource and reusablePlugSetHash for the
    relationship between these reusable plug sets and the sockets that leverage
    them (for starters, Emotes).

    As of the release of Shadowkeep (Late 2019), these will begin to be sourced from game content directly - which means there will be many more of them, but it also means we may not get all data that we used to get for them.
    DisplayProperties, in particular, will no longer be guaranteed to contain valid information. We will make a best effort to guess what ought to be populated there where possible, but it will be invalid for many/most plug sets.
    """

    display_properties: t.Any
    reusable_plug_items: t.Sequence[
        "DestinyItemSocketEntryPlugItemRandomizedDefinition"
    ]
    is_fake_plug_set: bool
    hash: int
    index: int
    redacted: bool


# imported at the end to do not case circular imports for type annotations
from bungieapi.generated.types.destiny import DestinySocketCategoryStyle  # noqa: E402
from bungieapi.generated.types.destiny import DestinySocketVisibility  # noqa: E402
from bungieapi.generated.types.destiny import SocketTypeActionType  # noqa: E402
from bungieapi.generated.types.destiny.definitions import (
    DestinyItemSocketEntryPlugItemRandomizedDefinition,
)  # noqa: E402
from bungieapi.generated.types.destiny.definitions.common import (
    DestinyDisplayPropertiesDefinition,
)  # noqa: E402
