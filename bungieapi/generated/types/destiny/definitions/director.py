# generated by update to not change manually
import dataclasses as dt
import typing as t


@dt.dataclass(frozen=True)
class DestinyActivityGraphDefinition:
    """'Represents a Map View in the director: be them overview views,
    destination views, or other.

    They have nodes which map to activities, and other various visual
    elements that we (or others) may or may not be able to use. Activity
    graphs, most importantly, have nodes which can have activities in
    various states of playability. Unfortunately, activity graphs are
    combined at runtime with Game UI-only assets such as fragments of
    map images, various in-game special effects, decals etc... that we
    don't get in these definitions. If we end up having time, we may end
    up trying to manually populate those here: but the last time we
    tried that, before the lead-up to D1, it proved to be unmaintainable
    as the game's content changed. So don't bet the farm on us providing
    that content in this definition.
    """

    nodes: t.Sequence["DestinyActivityGraphNodeDefinition"]
    art_elements: t.Sequence["DestinyActivityGraphArtElementDefinition"]
    connections: t.Sequence["DestinyActivityGraphConnectionDefinition"]
    display_objectives: t.Sequence["DestinyActivityGraphDisplayObjectiveDefinition"]
    display_progressions: t.Sequence["DestinyActivityGraphDisplayProgressionDefinition"]
    linked_graphs: t.Sequence["DestinyLinkedGraphDefinition"]
    hash: int
    index: int
    redacted: bool


@dt.dataclass(frozen=True)
class DestinyActivityGraphNodeDefinition:
    """'This is the position and other data related to nodes in the activity
    graph that you can click to launch activities.

    An Activity Graph node will only have one active Activity at a time,
    which will determine the activity to be launched (and, unless
    overrideDisplay information is provided, will also determine the
    tooltip and other UI related to the node)
    """

    node_id: int
    override_display: t.Any
    position: t.Any
    featuring_states: t.Sequence["DestinyActivityGraphNodeFeaturingStateDefinition"]
    activities: t.Sequence["DestinyActivityGraphNodeActivityDefinition"]
    states: t.Sequence["DestinyActivityGraphNodeStateEntry"]


@dt.dataclass(frozen=True)
class DestinyActivityGraphNodeFeaturingStateDefinition:
    """'Nodes can have different visual states.

    This object represents a single visual state ("highlight type") that
    a node can be in, and the unlock expression condition to determine
    whether it should be set.
    """

    highlight_type: "ActivityGraphNodeHighlightType"


@dt.dataclass(frozen=True)
class DestinyActivityGraphNodeActivityDefinition:
    """'The actual activity to be redirected to when you click on the node.

    Note that a node can have many Activities attached to it: but only
    one will be active at any given time. The list of Node Activities
    will be traversed, and the first one found to be active will be
    displayed. This way, a node can layer multiple variants of an
    activity on top of each other. For instance, one node can control
    the weekly Crucible Playlist. There are multiple possible playlists,
    but only one is active for the week.
    """

    node_activity_id: int
    activity_hash: int


@dt.dataclass(frozen=True)
class DestinyActivityGraphNodeStateEntry:
    """'Represents a single state that a graph node might end up in.

    Depending on what's going on in the game, graph nodes could be shown
    in different ways or even excluded from view entirely.
    """

    state: "DestinyGraphNodeState"


@dt.dataclass(frozen=True)
class DestinyActivityGraphArtElementDefinition:
    """'These Art Elements are meant to represent one-off visual effects
    overlaid on the map.

    Currently, we do not have a pipeline to import the assets for these
    overlays, so this info exists as a placeholder for when such a
    pipeline exists (if it ever will)
    """

    position: t.Any


@dt.dataclass(frozen=True)
class DestinyActivityGraphConnectionDefinition:
    """'Nodes on a graph can be visually connected: this appears to be the
    information about which nodes to link.

    It appears to lack more detailed information, such as the path for
    that linking.
    """

    source_node_hash: int
    dest_node_hash: int


@dt.dataclass(frozen=True)
class DestinyActivityGraphDisplayObjectiveDefinition:
    """'When a Graph needs to show active Objectives, this defines those
    objectives as well as an identifier."""

    id: int
    objective_hash: int


@dt.dataclass(frozen=True)
class DestinyActivityGraphDisplayProgressionDefinition:
    """'When a Graph needs to show active Progressions, this defines those
    objectives as well as an identifier."""

    id: int
    progression_hash: int


@dt.dataclass(frozen=True)
class DestinyLinkedGraphDefinition:
    """'This describes links between the current graph and others, as well as
    when that link is relevant."""

    description: str
    name: str
    unlock_expression: "DestinyUnlockExpressionDefinition"
    linked_graph_id: int
    linked_graphs: t.Sequence["DestinyLinkedGraphEntryDefinition"]
    overview: str


@dt.dataclass(frozen=True)
class DestinyLinkedGraphEntryDefinition:
    activity_graph_hash: int


# imported at the end to do not case circular imports for type annotations
from bungieapi.generated.types.destiny import (
    ActivityGraphNodeHighlightType,
)  # noqa: E402
from bungieapi.generated.types.destiny import DestinyGraphNodeState  # noqa: E402
from bungieapi.generated.types.destiny.definitions import (
    DestinyUnlockExpressionDefinition,
)  # noqa: E402
