# generated by update to not change manually
import dataclasses as dt
import typing as t

from bungieapi.generated.types.destiny import (DestinyItemQuantity,
                                               DestinyPresentationNodeType,
                                               DestinyRecordToastStyle,
                                               DestinyRecordValueStyle,
                                               DestinyScope)
from bungieapi.generated.types.destiny.definitions.common import \
    DestinyDisplayPropertiesDefinition
from bungieapi.generated.types.destiny.definitions.presentation import (
    DestinyPresentationChildBlock, DestinyPresentationNodeRequirementsBlock)


@dt.dataclass(frozen=True)
class DestinyRecordDefinition:
    display_properties: DestinyDisplayPropertiesDefinition
    scope: DestinyScope
    presentation_info: DestinyPresentationChildBlock
    lore_hash: int
    objective_hashes: t.Sequence[int]
    record_value_style: DestinyRecordValueStyle
    for_title_gilding: bool
    title_info: "DestinyRecordTitleBlock"
    completion_info: "DestinyRecordCompletionBlock"
    state_info: "SchemaRecordStateBlock"
    requirements: DestinyPresentationNodeRequirementsBlock
    expiration_info: "DestinyRecordExpirationBlock"
    interval_info: t.Any
    reward_items: t.Sequence[DestinyItemQuantity]
    presentation_node_type: DestinyPresentationNodeType
    trait_ids: t.Sequence[str]
    trait_hashes: t.Sequence[int]
    parent_node_hashes: t.Sequence[int]
    hash: int
    index: int
    redacted: bool


@dt.dataclass(frozen=True)
class DestinyRecordTitleBlock:
    has_title: bool
    titles_by_gender: t.Mapping[str, str]
    titles_by_gender_hash: t.Mapping[str, str]
    gilding_tracking_record_hash: int


@dt.dataclass(frozen=True)
class DestinyRecordCompletionBlock:
    partial_completion_objective_count_threshold: int
    score_value: int
    should_fire_toast: bool
    toast_style: DestinyRecordToastStyle


@dt.dataclass(frozen=True)
class SchemaRecordStateBlock:
    featured_priority: int
    obscured_string: str


@dt.dataclass(frozen=True)
class DestinyRecordExpirationBlock:
    """'If this record has an expiration after which it cannot be earned, this
    is some information about that expiration."""

    has_expiration: bool
    description: str
    icon: str


@dt.dataclass(frozen=True)
class DestinyRecordIntervalBlock:
    interval_objectives: t.Sequence["DestinyRecordIntervalObjective"]
    interval_rewards: t.Sequence["DestinyRecordIntervalRewards"]
    original_objective_array_insertion_index: int


@dt.dataclass(frozen=True)
class DestinyRecordIntervalObjective:
    interval_objective_hash: int
    interval_score_value: int


@dt.dataclass(frozen=True)
class DestinyRecordIntervalRewards:
    interval_reward_items: t.Sequence[DestinyItemQuantity]
