# generated by update to not change manually
import dataclasses as dt
import typing as t
from enum import Enum


@dt.dataclass(frozen=True)
class DestinyActionRequest:
    membership_type: "BungieMembershipType"


@dt.dataclass(frozen=True)
class DestinyCharacterActionRequest:
    character_id: int
    membership_type: "BungieMembershipType"


@dt.dataclass(frozen=True)
class DestinyItemActionRequest:
    item_id: int  # The instance ID of the item for this action request.
    character_id: int
    membership_type: "BungieMembershipType"


@dt.dataclass(frozen=True)
class DestinyPostmasterTransferRequest:
    item_reference_hash: int
    stack_size: int
    item_id: int  # The instance ID of the item for this action request.
    character_id: int
    membership_type: "BungieMembershipType"


@dt.dataclass(frozen=True)
class DestinyItemSetActionRequest:
    item_ids: t.Sequence[int]
    character_id: int
    membership_type: "BungieMembershipType"


@dt.dataclass(frozen=True)
class DestinyItemStateRequest:
    state: bool
    item_id: int  # The instance ID of the item for this action request.
    character_id: int
    membership_type: "BungieMembershipType"


@dt.dataclass(frozen=True)
class DestinyInsertPlugsActionRequest:
    action_token: str  # Action token provided by the AwaGetActionToken API call.
    item_instance_id: int  # The instance ID of the item having a plug inserted. Only instanced items can have sockets.
    plug: "DestinyInsertPlugsRequestEntry"  # The plugs being inserted.
    character_id: int
    membership_type: "BungieMembershipType"


@dt.dataclass(frozen=True)
class DestinyInsertPlugsRequestEntry:
    """Represents all of the data related to a single plug to be inserted.

    Note that, while you *can* point to a socket that represents
    infusion, you will receive an error if you attempt to do so. Come on
    guys, let's play nice.
    """

    socket_index: int  # The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket. Don't point to or try to insert a plug into an infusion socket. It won't work.
    socket_array_type: "DestinySocketArrayType"  # This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and "default" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.
    plug_item_hash: int  # Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.


class DestinySocketArrayType(Enum):
    """If you look in the DestinyInventoryItemDefinition's "sockets" property,
    you'll see that there are two types of sockets: intrinsic, and
    "socketEntry." Unfortunately, because Intrinsic sockets are a whole
    separate array, it is no longer sufficient to know the index into that
    array to know which socket we're talking about.

    You have to know whether it's in the default "socketEntries" or if
    it's in the "intrinsic" list.
    """

    DEFAULT = 0
    INTRINSIC = 1


@dt.dataclass(frozen=True)
class DestinyInsertPlugsFreeActionRequest:
    plug: "DestinyInsertPlugsRequestEntry"  # The plugs being inserted.
    item_id: int  # The instance ID of the item for this action request.
    character_id: int
    membership_type: "BungieMembershipType"


# imported at the end to do not case circular imports for type annotations
from bungieapi.generated.types import BungieMembershipType  # noqa: E402
