from functools import singledispatch

from svarog.tools import camel_to_snake

from radegast.generators.generic import generate_response, indentation, literal
from radegast.openapi import OpenApi, OperationTree, BindOperation
import typing as t

BASE_CLIENT = """
class BaseClient:
    def __init__(self, session: aiohttp.ClientSession, path: str) -> None:
        self._session = session
        self._path = path
"""

MAIN_CLIENT = """
class Client:
    _session = t.Optional[aiohttp.ClientSession]

    def __init__(self, base_url=BASE_URL, **kwargs) -> None:
        self._base_url = base_url
        self._session = None
        self._kwargs = kwargs

    async def __aenter__(self) -> RootClient:
        self._session = aiohttp.ClientSession(
            base_url=self._base_url, **self._kwargs 
        )
        return RootClient(self._session, BASE_PATH)

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        assert self._session
        await self._session.close()
"""


@singledispatch
def generate_client_method(
    node: t.Union[OperationTree, BindOperation]
) -> t.Sequence[str]:
    raise RuntimeError(f"Not defined for type {type(node)}")


@generate_client_method.register
def generate_client_method_operation(operation: BindOperation) -> t.Sequence[str]:
    response = operation.responses['200']
    response_type = f"{operation.name}Response"
    yield from indentation(generate_response(response, response_type), 1)

    yield f"    def {operation.python_name}(self,"
    for parameter in sorted(
        operation.parameters, key=lambda param: not param.type.required
    ):
        yield f"{parameter.python_name}: {literal(parameter.type)}{ ' = None' if not parameter.type.required  else ''},"
    yield f") -> {response_type}:"
    if operation.description:
        yield f'        """{operation.description}"""'
    yield f"        ..."


@generate_client_method.register
def generate_client_method_node(operation_tree: OperationTree) -> t.Sequence[str]:
    klass = f"{operation_tree.name}Client"
    yield "    @property"
    yield f'    def {camel_to_snake(operation_tree.name)}(self) -> "{klass}": '
    yield f"        return {klass}(self._session, self._path)"


def generate_from_operation_tree(operation_tree: OperationTree) -> t.Sequence[str]:
    yield f"class {operation_tree.name}Client(BaseClient):"
    if not operation_tree.children:
        yield "..."

    for child in operation_tree.children:
        yield from generate_client_method(child)

    for child in operation_tree.children:
        if isinstance(child, OperationTree):
            yield from generate_from_operation_tree(child)


class AsyncioGenerator:
    def generate(self, api: OpenApi) -> t.Sequence[str]:
        yield "# generated by radegast to not change manually"
        yield "import dataclasses as dt"
        yield "import typing as t"
        yield "import aiohttp"
        yield BASE_CLIENT
        yield from generate_from_operation_tree(api.operations_tree())
        yield f'BASE_URL = "{api.schemes[0].value}://{api.host}"'
        yield f'BASE_PATH = "{api.base_path}"'
        yield MAIN_CLIENT
        yield "__all__ = ['Client']"
