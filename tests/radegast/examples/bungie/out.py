# generated by radegast to not change manually
import dataclasses as dt
import typing as t

import aiohttp


class BaseClient:
    def __init__(self, session: aiohttp.ClientSession, path: str) -> None:
        self._session = session
        self._path = path


class RootClient(BaseClient):
    @dt.dataclass(frozen=True)
    class GetAvailableLocalesResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_available_locales(
        self,
    ) -> GetAvailableLocalesResponse:
        """List of available localization cultures."""
        ...

    @dt.dataclass(frozen=True)
    class GetCommonSettingsResponse:
        response: "CommonModelsCoreSettingsConfiguration"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_common_settings(
        self,
    ) -> GetCommonSettingsResponse:
        """Get the common settings used by the Bungie.Net environment."""
        ...

    @dt.dataclass(frozen=True)
    class GetUserSystemOverridesResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_user_system_overrides(
        self,
    ) -> GetUserSystemOverridesResponse:
        """Get the user-specific system overrides that should be respected
        alongside common systems."""
        ...

    @dt.dataclass(frozen=True)
    class GetGlobalAlertsResponse:
        response: t.Sequence["GlobalAlert"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_global_alerts(
        self,
        includestreaming: t.Optional[bool] = None,
    ) -> GetGlobalAlertsResponse:
        """Gets any active global alert for display in the forum banners, help
        pages, etc.

        Usually used for DOC alerts.
        """
        ...

    @property
    def app(self) -> "AppClient":
        return AppClient(self._session, self._path)

    @property
    def user(self) -> "UserClient":
        return UserClient(self._session, self._path)

    @property
    def content(self) -> "ContentClient":
        return ContentClient(self._session, self._path)

    @property
    def forum(self) -> "ForumClient":
        return ForumClient(self._session, self._path)

    @property
    def group_v2(self) -> "GroupV2Client":
        return GroupV2Client(self._session, self._path)

    @property
    def tokens(self) -> "TokensClient":
        return TokensClient(self._session, self._path)

    @property
    def destiny2(self) -> "Destiny2Client":
        return Destiny2Client(self._session, self._path)

    @property
    def community_content(self) -> "CommunityContentClient":
        return CommunityContentClient(self._session, self._path)

    @property
    def trending(self) -> "TrendingClient":
        return TrendingClient(self._session, self._path)

    @property
    def fireteam(self) -> "FireteamClient":
        return FireteamClient(self._session, self._path)

    @property
    def social(self) -> "SocialClient":
        return SocialClient(self._session, self._path)


class AppClient(BaseClient):
    @dt.dataclass(frozen=True)
    class GetApplicationApiUsageResponse:
        response: "ApplicationsApiUsage"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_application_api_usage(
        self,
        application_id: int,
        end: t.Optional[str] = None,
        start: t.Optional[str] = None,
    ) -> GetApplicationApiUsageResponse:
        """Get API usage by application for time frame specified.

        You can go as far back as 30 days ago, and can ask for up to a
        48 hour window of time in a single request. You must be
        authenticated with at least the ReadUserData permission to
        access this endpoint.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetBungieApplicationsResponse:
        response: t.Sequence["ApplicationsApplication"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_bungie_applications(
        self,
    ) -> GetBungieApplicationsResponse:
        """Get list of applications created by Bungie."""
        ...


class UserClient(BaseClient):
    @dt.dataclass(frozen=True)
    class GetBungieNetUserByIdResponse:
        response: "UserGeneralUser"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_bungie_net_user_by_id(
        self,
        id: int,
    ) -> GetBungieNetUserByIdResponse:
        """Loads a bungienet user by membership id."""
        ...

    @dt.dataclass(frozen=True)
    class GetCredentialTypesForTargetAccountResponse:
        response: t.Sequence["UserModelsGetCredentialTypesForAccountResponse"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_credential_types_for_target_account(
        self,
        membership_id: int,
    ) -> GetCredentialTypesForTargetAccountResponse:
        """Returns a list of credential types attached to the requested
        account."""
        ...

    @dt.dataclass(frozen=True)
    class GetAvailableThemesResponse:
        response: t.Sequence["ConfigUserTheme"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_available_themes(
        self,
    ) -> GetAvailableThemesResponse:
        """Returns a list of all available user themes."""
        ...

    @dt.dataclass(frozen=True)
    class GetMembershipDataByIdResponse:
        response: "UserUserMembershipData"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_membership_data_by_id(
        self,
        membership_id: int,
        membership_type: int,
    ) -> GetMembershipDataByIdResponse:
        """Returns a list of accounts associated with the supplied membership
        ID and membership type.

        This will include all linked accounts (even when hidden) if
        supplied credentials permit it.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetMembershipDataForCurrentUserResponse:
        response: "UserUserMembershipData"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_membership_data_for_current_user(
        self,
    ) -> GetMembershipDataForCurrentUserResponse:
        """Returns a list of accounts associated with signed in user.

        This is useful for OAuth implementations that do not give you
        access to the token response.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetMembershipFromHardLinkedCredentialResponse:
        response: "UserHardLinkedUserMembership"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_membership_from_hard_linked_credential(
        self,
        credential: str,
        cr_type: int,
    ) -> GetMembershipFromHardLinkedCredentialResponse:
        """Gets any hard linked membership given a credential.

        Only works for credentials that are public (just SteamID64 right
        now). Cross Save aware.
        """
        ...

    @dt.dataclass(frozen=True)
    class SearchByGlobalNamePrefixResponse:
        response: "UserUserSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def search_by_global_name_prefix(
        self,
        display_name_prefix: str,
        page: int,
    ) -> SearchByGlobalNamePrefixResponse:
        """[OBSOLETE] Do not use this to search users, use
        SearchByGlobalNamePost instead."""
        ...

    @dt.dataclass(frozen=True)
    class SearchByGlobalNamePostResponse:
        response: "UserUserSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def search_by_global_name_post(
        self,
        page: int,
    ) -> SearchByGlobalNamePostResponse:
        """Given the prefix of a global display name, returns all users who
        share that name."""
        ...


class ContentClient(BaseClient):
    @dt.dataclass(frozen=True)
    class GetContentTypeResponse:
        response: "ContentModelsContentTypeDescription"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_content_type(
        self,
        type: str,
    ) -> GetContentTypeResponse:
        """Gets an object describing a particular variant of content."""
        ...

    @dt.dataclass(frozen=True)
    class GetContentByIdResponse:
        response: "ContentContentItemPublicContract"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_content_by_id(
        self,
        id: int,
        locale: str,
        head: t.Optional[bool] = None,
    ) -> GetContentByIdResponse:
        """Returns a content item referenced by id."""
        ...

    @dt.dataclass(frozen=True)
    class GetContentByTagAndTypeResponse:
        response: "ContentContentItemPublicContract"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_content_by_tag_and_type(
        self,
        locale: str,
        tag: str,
        type: str,
        head: t.Optional[bool] = None,
    ) -> GetContentByTagAndTypeResponse:
        """Returns the newest item that matches a given tag and Content
        Type."""
        ...

    @dt.dataclass(frozen=True)
    class SearchContentWithTextResponse:
        response: "SearchResultOfContentItemPublicContract"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def search_content_with_text(
        self,
        locale: str,
        ctype: t.Optional[str] = None,
        currentpage: t.Optional[int] = None,
        head: t.Optional[bool] = None,
        searchtext: t.Optional[str] = None,
        source: t.Optional[str] = None,
        tag: t.Optional[str] = None,
    ) -> SearchContentWithTextResponse:
        """Gets content based on querystring information passed in.

        Provides basic search and text search capabilities.
        """
        ...

    @dt.dataclass(frozen=True)
    class SearchContentByTagAndTypeResponse:
        response: "SearchResultOfContentItemPublicContract"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def search_content_by_tag_and_type(
        self,
        locale: str,
        tag: str,
        type: str,
        currentpage: t.Optional[int] = None,
        head: t.Optional[bool] = None,
        itemsperpage: t.Optional[int] = None,
    ) -> SearchContentByTagAndTypeResponse:
        """Searches for Content Items that match the given Tag and Content
        Type."""
        ...

    @dt.dataclass(frozen=True)
    class SearchHelpArticlesResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def search_help_articles(
        self,
        searchtext: str,
        size: str,
    ) -> SearchHelpArticlesResponse:
        """Search for Help Articles."""
        ...


class ForumClient(BaseClient):
    @dt.dataclass(frozen=True)
    class GetTopicsPagedResponse:
        response: "ForumPostSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_topics_paged(
        self,
        category_filter: int,
        group: int,
        page: int,
        page_size: int,
        quick_date: int,
        sort: int,
        locales: t.Optional[str] = None,
        tagstring: t.Optional[str] = None,
    ) -> GetTopicsPagedResponse:
        """Get topics from any forum."""
        ...

    @dt.dataclass(frozen=True)
    class GetCoreTopicsPagedResponse:
        response: "ForumPostSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_core_topics_paged(
        self,
        category_filter: int,
        page: int,
        quick_date: int,
        sort: int,
        locales: t.Optional[str] = None,
    ) -> GetCoreTopicsPagedResponse:
        """Gets a listing of all topics marked as part of the core group."""
        ...

    @dt.dataclass(frozen=True)
    class GetPostsThreadedPagedResponse:
        response: "ForumPostSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_posts_threaded_paged(
        self,
        get_parent_post: bool,
        page: int,
        page_size: int,
        parent_post_id: int,
        reply_size: int,
        root_thread_mode: bool,
        sort_mode: int,
        showbanned: t.Optional[str] = None,
    ) -> GetPostsThreadedPagedResponse:
        """Returns a thread of posts at the given parent, optionally returning
        replies to those posts as well as the original parent."""
        ...

    @dt.dataclass(frozen=True)
    class GetPostsThreadedPagedFromChildResponse:
        response: "ForumPostSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_posts_threaded_paged_from_child(
        self,
        child_post_id: int,
        page: int,
        page_size: int,
        reply_size: int,
        root_thread_mode: bool,
        sort_mode: int,
        showbanned: t.Optional[str] = None,
    ) -> GetPostsThreadedPagedFromChildResponse:
        """Returns a thread of posts starting at the topicId of the input
        childPostId, optionally returning replies to those posts as well as the
        original parent."""
        ...

    @dt.dataclass(frozen=True)
    class GetPostAndParentResponse:
        response: "ForumPostSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_post_and_parent(
        self,
        child_post_id: int,
        showbanned: t.Optional[str] = None,
    ) -> GetPostAndParentResponse:
        """Returns the post specified and its immediate parent."""
        ...

    @dt.dataclass(frozen=True)
    class GetPostAndParentAwaitingApprovalResponse:
        response: "ForumPostSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_post_and_parent_awaiting_approval(
        self,
        child_post_id: int,
        showbanned: t.Optional[str] = None,
    ) -> GetPostAndParentAwaitingApprovalResponse:
        """Returns the post specified and its immediate parent of posts that
        are awaiting approval."""
        ...

    @dt.dataclass(frozen=True)
    class GetTopicForContentResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_topic_for_content(
        self,
        content_id: int,
    ) -> GetTopicForContentResponse:
        """Gets the post Id for the given content item's comments, if it
        exists."""
        ...

    @dt.dataclass(frozen=True)
    class GetForumTagSuggestionsResponse:
        response: t.Sequence["TagsModelsContractsTagResponse"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_forum_tag_suggestions(
        self,
        partialtag: t.Optional[str] = None,
    ) -> GetForumTagSuggestionsResponse:
        """Gets tag suggestions based on partial text entry, matching them with
        other tags previously used in the forums."""
        ...

    @dt.dataclass(frozen=True)
    class GetPollResponse:
        response: "ForumPostSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_poll(
        self,
        topic_id: int,
    ) -> GetPollResponse:
        """Gets the specified forum poll."""
        ...

    @dt.dataclass(frozen=True)
    class GetRecruitmentThreadSummariesResponse:
        response: t.Sequence["ForumForumRecruitmentDetail"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_recruitment_thread_summaries(
        self,
    ) -> GetRecruitmentThreadSummariesResponse:
        """Allows the caller to get a list of to 25 recruitment thread summary
        information objects."""
        ...


class GroupV2Client(BaseClient):
    @dt.dataclass(frozen=True)
    class GetAvailableAvatarsResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_available_avatars(
        self,
    ) -> GetAvailableAvatarsResponse:
        """Returns a list of all available group avatars for the signed-in
        user."""
        ...

    @dt.dataclass(frozen=True)
    class GetAvailableThemesResponse:
        response: t.Sequence["ConfigGroupTheme"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_available_themes(
        self,
    ) -> GetAvailableThemesResponse:
        """Returns a list of all available group themes."""
        ...

    @dt.dataclass(frozen=True)
    class GetUserClanInviteSettingResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_user_clan_invite_setting(
        self,
        m_type: int,
    ) -> GetUserClanInviteSettingResponse:
        """Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise."""
        ...

    @dt.dataclass(frozen=True)
    class GetRecommendedGroupsResponse:
        response: t.Sequence["GroupsV2GroupV2Card"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_recommended_groups(
        self,
        create_date_range: int,
        group_type: int,
    ) -> GetRecommendedGroupsResponse:
        """Gets groups recommended for you based on the groups to whom those
        you follow belong."""
        ...

    @dt.dataclass(frozen=True)
    class GroupSearchResponse:
        response: "GroupsV2GroupSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def group_search(
        self,
    ) -> GroupSearchResponse:
        """Search for Groups."""
        ...

    @dt.dataclass(frozen=True)
    class GetGroupResponse:
        response: "GroupsV2GroupResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_group(
        self,
        group_id: int,
    ) -> GetGroupResponse:
        """Get information about a specific group of the given ID."""
        ...

    @dt.dataclass(frozen=True)
    class GetGroupByNameResponse:
        response: "GroupsV2GroupResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_group_by_name(
        self,
        group_name: str,
        group_type: int,
    ) -> GetGroupByNameResponse:
        """Get information about a specific group with the given name and
        type."""
        ...

    @dt.dataclass(frozen=True)
    class GetGroupByNameV2Response:
        response: "GroupsV2GroupResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_group_by_name_v2(
        self,
    ) -> GetGroupByNameV2Response:
        """Get information about a specific group with the given name and type.

        The POST version.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetGroupOptionalConversationsResponse:
        response: t.Sequence["GroupsV2GroupOptionalConversation"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_group_optional_conversations(
        self,
        group_id: int,
    ) -> GetGroupOptionalConversationsResponse:
        """Gets a list of available optional conversation channels and their
        settings."""
        ...

    @dt.dataclass(frozen=True)
    class EditGroupResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def edit_group(
        self,
        group_id: int,
    ) -> EditGroupResponse:
        """Edit an existing group.

        You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        """
        ...

    @dt.dataclass(frozen=True)
    class EditClanBannerResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def edit_clan_banner(
        self,
        group_id: int,
    ) -> EditClanBannerResponse:
        """Edit an existing group's clan banner.

        You must have suitable permissions in the group to perform this
        operation. All fields are required.
        """
        ...

    @dt.dataclass(frozen=True)
    class EditFounderOptionsResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def edit_founder_options(
        self,
        group_id: int,
    ) -> EditFounderOptionsResponse:
        """Edit group options only available to a founder.

        You must have suitable permissions in the group to perform this
        operation.
        """
        ...

    @dt.dataclass(frozen=True)
    class AddOptionalConversationResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def add_optional_conversation(
        self,
        group_id: int,
    ) -> AddOptionalConversationResponse:
        """Add a new optional conversation/chat channel.

        Requires admin permissions to the group.
        """
        ...

    @dt.dataclass(frozen=True)
    class EditOptionalConversationResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def edit_optional_conversation(
        self,
        conversation_id: int,
        group_id: int,
    ) -> EditOptionalConversationResponse:
        """Edit the settings of an optional conversation/chat channel.

        Requires admin permissions to the group.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetMembersOfGroupResponse:
        response: "SearchResultOfGroupMember"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_members_of_group(
        self,
        currentpage: int,
        group_id: int,
        member_type: t.Optional[int] = None,
        name_search: t.Optional[str] = None,
    ) -> GetMembersOfGroupResponse:
        """Get the list of members in a given group."""
        ...

    @dt.dataclass(frozen=True)
    class GetAdminsAndFounderOfGroupResponse:
        response: "SearchResultOfGroupMember"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_admins_and_founder_of_group(
        self,
        currentpage: int,
        group_id: int,
    ) -> GetAdminsAndFounderOfGroupResponse:
        """Get the list of members in a given group who are of admin level or
        higher."""
        ...

    @dt.dataclass(frozen=True)
    class EditGroupMembershipResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def edit_group_membership(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
        member_type: int,
    ) -> EditGroupMembershipResponse:
        """Edit the membership type of a given member.

        You must have suitable permissions in the group to perform this
        operation.
        """
        ...

    @dt.dataclass(frozen=True)
    class KickMemberResponse:
        response: "GroupsV2GroupMemberLeaveResult"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def kick_member(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> KickMemberResponse:
        """Kick a member from the given group, forcing them to reapply if they
        wish to re-join the group.

        You must have suitable permissions in the group to perform this
        operation.
        """
        ...

    @dt.dataclass(frozen=True)
    class BanMemberResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def ban_member(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> BanMemberResponse:
        """Bans the requested member from the requested group for the specified
        period of time."""
        ...

    @dt.dataclass(frozen=True)
    class UnbanMemberResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def unban_member(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> UnbanMemberResponse:
        """Unbans the requested member, allowing them to re-apply for
        membership."""
        ...

    @dt.dataclass(frozen=True)
    class GetBannedMembersOfGroupResponse:
        response: "SearchResultOfGroupBan"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_banned_members_of_group(
        self,
        currentpage: int,
        group_id: int,
    ) -> GetBannedMembersOfGroupResponse:
        """Get the list of banned members in a given group.

        Only accessible to group Admins and above. Not applicable to all
        groups. Check group features.
        """
        ...

    @dt.dataclass(frozen=True)
    class AbdicateFoundershipResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def abdicate_foundership(
        self,
        founder_id_new: int,
        group_id: int,
        membership_type: int,
    ) -> AbdicateFoundershipResponse:
        """An administrative method to allow the founder of a group or clan to
        give up their position to another admin permanently."""
        ...

    @dt.dataclass(frozen=True)
    class GetPendingMembershipsResponse:
        response: "SearchResultOfGroupMemberApplication"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_pending_memberships(
        self,
        currentpage: int,
        group_id: int,
    ) -> GetPendingMembershipsResponse:
        """Get the list of users who are awaiting a decision on their
        application to join a given group.

        Modified to include application info.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetInvitedIndividualsResponse:
        response: "SearchResultOfGroupMemberApplication"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_invited_individuals(
        self,
        currentpage: int,
        group_id: int,
    ) -> GetInvitedIndividualsResponse:
        """Get the list of users who have been invited into the group."""
        ...

    @dt.dataclass(frozen=True)
    class ApproveAllPendingResponse:
        response: t.Sequence["EntitiesEntityActionResult"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def approve_all_pending(
        self,
        group_id: int,
    ) -> ApproveAllPendingResponse:
        """Approve all of the pending users for the given group."""
        ...

    @dt.dataclass(frozen=True)
    class DenyAllPendingResponse:
        response: t.Sequence["EntitiesEntityActionResult"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def deny_all_pending(
        self,
        group_id: int,
    ) -> DenyAllPendingResponse:
        """Deny all of the pending users for the given group."""
        ...

    @dt.dataclass(frozen=True)
    class ApprovePendingForListResponse:
        response: t.Sequence["EntitiesEntityActionResult"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def approve_pending_for_list(
        self,
        group_id: int,
    ) -> ApprovePendingForListResponse:
        """Approve all of the pending users for the given group."""
        ...

    @dt.dataclass(frozen=True)
    class ApprovePendingResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def approve_pending(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> ApprovePendingResponse:
        """Approve the given membershipId to join the group/clan as long as
        they have applied."""
        ...

    @dt.dataclass(frozen=True)
    class DenyPendingForListResponse:
        response: t.Sequence["EntitiesEntityActionResult"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def deny_pending_for_list(
        self,
        group_id: int,
    ) -> DenyPendingForListResponse:
        """Deny all of the pending users for the given group that match the
        passed-in ."""
        ...

    @dt.dataclass(frozen=True)
    class GetGroupsForMemberResponse:
        response: "GroupsV2GetGroupsForMemberResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_groups_for_member(
        self,
        filter: int,
        group_type: int,
        membership_id: int,
        membership_type: int,
    ) -> GetGroupsForMemberResponse:
        """Get information about the groups that a given member has joined."""
        ...

    @dt.dataclass(frozen=True)
    class RecoverGroupForFounderResponse:
        response: "GroupsV2GroupMembershipSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def recover_group_for_founder(
        self,
        group_type: int,
        membership_id: int,
        membership_type: int,
    ) -> RecoverGroupForFounderResponse:
        """Allows a founder to manually recover a group they can see in game
        but not on bungie.net."""
        ...

    @dt.dataclass(frozen=True)
    class GetPotentialGroupsForMemberResponse:
        response: "GroupsV2GroupPotentialMembershipSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_potential_groups_for_member(
        self,
        filter: int,
        group_type: int,
        membership_id: int,
        membership_type: int,
    ) -> GetPotentialGroupsForMemberResponse:
        """Get information about the groups that a given member has applied to
        or been invited to."""
        ...

    @dt.dataclass(frozen=True)
    class IndividualGroupInviteResponse:
        response: "GroupsV2GroupApplicationResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def individual_group_invite(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> IndividualGroupInviteResponse:
        """Invite a user to join this group."""
        ...

    @dt.dataclass(frozen=True)
    class IndividualGroupInviteCancelResponse:
        response: "GroupsV2GroupApplicationResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def individual_group_invite_cancel(
        self,
        group_id: int,
        membership_id: int,
        membership_type: int,
    ) -> IndividualGroupInviteCancelResponse:
        """Cancels a pending invitation to join a group."""
        ...


class TokensClient(BaseClient):
    @dt.dataclass(frozen=True)
    class ClaimPartnerOfferResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def claim_partner_offer(
        self,
    ) -> ClaimPartnerOfferResponse:
        """Claim a partner offer as the authenticated user."""
        ...

    @dt.dataclass(frozen=True)
    class ApplyMissingPartnerOffersWithoutClaimResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def apply_missing_partner_offers_without_claim(
        self,
        partner_application_id: int,
        target_bnet_membership_id: int,
    ) -> ApplyMissingPartnerOffersWithoutClaimResponse:
        """Apply a partner offer to the targeted user.

        This endpoint does not claim a new offer, but any already
        claimed offers will be applied to the game if not already.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetPartnerOfferSkuHistoryResponse:
        response: t.Sequence["TokensPartnerOfferSkuHistoryResponse"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_partner_offer_sku_history(
        self,
        partner_application_id: int,
        target_bnet_membership_id: int,
    ) -> GetPartnerOfferSkuHistoryResponse:
        """Returns the partner sku and offer history of the targeted user.

        Elevated permissions are required to see users that are not
        yourself.
        """
        ...


class Destiny2Client(BaseClient):
    @dt.dataclass(frozen=True)
    class GetDestinyManifestResponse:
        response: "DestinyConfigDestinyManifest"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_destiny_manifest(
        self,
    ) -> GetDestinyManifestResponse:
        """Returns the current version of the manifest as a json object."""
        ...

    @dt.dataclass(frozen=True)
    class GetDestinyEntityDefinitionResponse:
        response: "DestinyDefinitionsDestinyDefinition"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_destiny_entity_definition(
        self,
        entity_type: str,
        hash_identifier: int,
    ) -> GetDestinyEntityDefinitionResponse:
        """Returns the static definition of an entity of the given Type and
        hash identifier.

        Examine the API Documentation for the Type Names of entities
        that have their own definitions. Note that the return type will
        always *inherit from* DestinyDefinition, but the specific type
        returned will be the requested entity type if it can be found.
        Please don't use this as a chatty alternative to the Manifest
        database if you require large sets of data, but for simple and
        one-off accesses this should be handy.
        """
        ...

    @dt.dataclass(frozen=True)
    class SearchDestinyPlayerByBungieNameResponse:
        response: t.Sequence["UserUserInfoCard"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def search_destiny_player_by_bungie_name(
        self,
        membership_type: int,
    ) -> SearchDestinyPlayerByBungieNameResponse:
        """Returns a list of Destiny memberships given a global Bungie Display
        Name.

        This method will hide overridden memberships due to cross save.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetLinkedProfilesResponse:
        response: "DestinyResponsesDestinyLinkedProfilesResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_linked_profiles(
        self,
        membership_id: int,
        membership_type: int,
        get_all_memberships: t.Optional[bool] = None,
    ) -> GetLinkedProfilesResponse:
        """Returns a summary information about all profiles linked to the
        requesting membership type/membership ID that have valid Destiny
        information.

        The passed-in Membership Type/Membership ID may be a Bungie.Net
        membership or a Destiny membership. It only returns the minimal
        amount of data to begin making more substantive requests, but
        will hopefully serve as a useful alternative to UserServices for
        people who just care about Destiny data. Note that it will only
        return linked accounts whose linkages you are allowed to view.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetProfileResponse:
        response: "DestinyResponsesDestinyProfileResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_profile(
        self,
        destiny_membership_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence[int]] = None,
    ) -> GetProfileResponse:
        """Returns Destiny Profile information for the supplied membership."""
        ...

    @dt.dataclass(frozen=True)
    class GetCharacterResponse:
        response: "DestinyResponsesDestinyCharacterResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_character(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence[int]] = None,
    ) -> GetCharacterResponse:
        """Returns character information for the supplied character."""
        ...

    @dt.dataclass(frozen=True)
    class GetClanWeeklyRewardStateResponse:
        response: "DestinyMilestonesDestinyMilestone"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_clan_weekly_reward_state(
        self,
        group_id: int,
    ) -> GetClanWeeklyRewardStateResponse:
        """Returns information on the weekly clan rewards and if the clan has
        earned them or not.

        Note that this will always report rewards as not redeemed.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetClanBannerSourceResponse:
        response: "ConfigClanBannerClanBannerSource"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_clan_banner_source(
        self,
    ) -> GetClanBannerSourceResponse:
        """Returns the dictionary of values for the Clan Banner."""
        ...

    @dt.dataclass(frozen=True)
    class GetItemResponse:
        response: "DestinyResponsesDestinyItemResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_item(
        self,
        destiny_membership_id: int,
        item_instance_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence[int]] = None,
    ) -> GetItemResponse:
        """Retrieve the details of an instanced Destiny Item.

        An instanced Destiny item is one with an ItemInstanceId. Non-
        instanced items, such as materials, have no useful instance-
        specific details and thus are not queryable here.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetVendorsResponse:
        response: "DestinyResponsesDestinyVendorsResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_vendors(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence[int]] = None,
        filter: t.Optional[int] = None,
    ) -> GetVendorsResponse:
        """Get currently available vendors from the list of vendors that can
        possibly have rotating inventory.

        Note that this does not include things like preview vendors and
        vendors-as-kiosks, neither of whom have rotating/dynamic
        inventories. Use their definitions as-is for those.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetVendorResponse:
        response: "DestinyResponsesDestinyVendorResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_vendor(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        vendor_hash: int,
        components: t.Optional[t.Sequence[int]] = None,
    ) -> GetVendorResponse:
        """Get the details of a specific Vendor."""
        ...

    @dt.dataclass(frozen=True)
    class GetPublicVendorsResponse:
        response: "DestinyResponsesDestinyPublicVendorsResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_public_vendors(
        self,
        components: t.Optional[t.Sequence[int]] = None,
    ) -> GetPublicVendorsResponse:
        """Get items available from vendors where the vendors have items for
        sale that are common for everyone.

        If any portion of the Vendor's available inventory is character
        or account specific, we will be unable to return their data from
        this endpoint due to the way that available inventory is
        computed. As I am often guilty of saying: 'It's a long story...'
        """
        ...

    @dt.dataclass(frozen=True)
    class GetCollectibleNodeDetailsResponse:
        response: "DestinyResponsesDestinyCollectibleNodeDetailResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_collectible_node_details(
        self,
        character_id: int,
        collectible_presentation_node_hash: int,
        destiny_membership_id: int,
        membership_type: int,
        components: t.Optional[t.Sequence[int]] = None,
    ) -> GetCollectibleNodeDetailsResponse:
        """Given a Presentation Node that has Collectibles as direct
        descendants, this will return item details about those descendants in
        the context of the requesting character."""
        ...

    @dt.dataclass(frozen=True)
    class TransferItemResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def transfer_item(
        self,
    ) -> TransferItemResponse:
        """Transfer an item to/from your vault.

        You must have a valid Destiny account. You must also pass BOTH a
        reference AND an instance ID if it's an instanced item.
        itshappening.gif
        """
        ...

    @dt.dataclass(frozen=True)
    class PullFromPostmasterResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def pull_from_postmaster(
        self,
    ) -> PullFromPostmasterResponse:
        """Extract an item from the Postmaster, with whatever implications that
        may entail.

        You must have a valid Destiny account. You must also pass BOTH a
        reference AND an instance ID if it's an instanced item.
        """
        ...

    @dt.dataclass(frozen=True)
    class EquipItemResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def equip_item(
        self,
    ) -> EquipItemResponse:
        """Equip an item.

        You must have a valid Destiny Account, and either be in a social
        space, in orbit, or offline.
        """
        ...

    @dt.dataclass(frozen=True)
    class EquipItemsResponse:
        response: "DestinyDestinyEquipItemResults"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def equip_items(
        self,
    ) -> EquipItemsResponse:
        """Equip a list of items by itemInstanceIds.

        You must have a valid Destiny Account, and either be in a social
        space, in orbit, or offline. Any items not found on your
        character will be ignored.
        """
        ...

    @dt.dataclass(frozen=True)
    class SetItemLockStateResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def set_item_lock_state(
        self,
    ) -> SetItemLockStateResponse:
        """Set the Lock State for an instanced item.

        You must have a valid Destiny Account.
        """
        ...

    @dt.dataclass(frozen=True)
    class SetQuestTrackedStateResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def set_quest_tracked_state(
        self,
    ) -> SetQuestTrackedStateResponse:
        """Set the Tracking State for an instanced item, if that item is a
        Quest or Bounty.

        You must have a valid Destiny Account. Yeah, it's an item.
        """
        ...

    @dt.dataclass(frozen=True)
    class InsertSocketPlugResponse:
        response: "DestinyResponsesDestinyItemChangeResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def insert_socket_plug(
        self,
    ) -> InsertSocketPlugResponse:
        """Insert a plug into a socketed item.

        I know how it sounds, but I assure you it's much more G-rated
        than you might be guessing. We haven't decided yet whether this
        will be able to insert plugs that have side effects, but if we
        do it will require special scope permission for an application
        attempting to do so. You must have a valid Destiny Account, and
        either be in a social space, in orbit, or offline. Request must
        include proof of permission for 'InsertPlugs' from the account
        owner.
        """
        ...

    @dt.dataclass(frozen=True)
    class InsertSocketPlugFreeResponse:
        response: "DestinyResponsesDestinyItemChangeResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def insert_socket_plug_free(
        self,
    ) -> InsertSocketPlugFreeResponse:
        """Insert a 'free' plug into an item's socket.

        This does not require 'Advanced Write Action' authorization and
        is available to 3rd-party apps, but will only work on 'free and
        reversible' socket actions (Perks, Armor Mods, Shaders,
        Ornaments, etc.). You must have a valid Destiny Account, and the
        character must either be in a social space, in orbit, or
        offline.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetPostGameCarnageReportResponse:
        response: "DestinyHistoricalStatsDestinyPostGameCarnageReportData"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_post_game_carnage_report(
        self,
        activity_id: int,
    ) -> GetPostGameCarnageReportResponse:
        """Gets the available post game carnage report for the activity ID."""
        ...

    @dt.dataclass(frozen=True)
    class ReportOffensivePostGameCarnageReportPlayerResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def report_offensive_post_game_carnage_report_player(
        self,
        activity_id: int,
    ) -> ReportOffensivePostGameCarnageReportPlayerResponse:
        """Report a player that you met in an activity that was engaging in
        ToS-violating activities.

        Both you and the offending player must have played in the
        activityId passed in. Please use this judiciously and only when
        you have strong suspicions of violation, pretty please.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetHistoricalStatsDefinitionResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_historical_stats_definition(
        self,
    ) -> GetHistoricalStatsDefinitionResponse:
        """Gets historical stats definitions."""
        ...

    @dt.dataclass(frozen=True)
    class GetClanLeaderboardsResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_clan_leaderboards(
        self,
        group_id: int,
        maxtop: t.Optional[int] = None,
        modes: t.Optional[str] = None,
        statid: t.Optional[str] = None,
    ) -> GetClanLeaderboardsResponse:
        """Gets leaderboards with the signed in user's friends and the supplied
        destinyMembershipId as the focus.

        PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetClanAggregateStatsResponse:
        response: t.Sequence["DestinyHistoricalStatsDestinyClanAggregateStat"]
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_clan_aggregate_stats(
        self,
        group_id: int,
        modes: t.Optional[str] = None,
    ) -> GetClanAggregateStatsResponse:
        """Gets aggregated stats for a clan using the same categories as the
        clan leaderboards.

        PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetLeaderboardsResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_leaderboards(
        self,
        destiny_membership_id: int,
        membership_type: int,
        maxtop: t.Optional[int] = None,
        modes: t.Optional[str] = None,
        statid: t.Optional[str] = None,
    ) -> GetLeaderboardsResponse:
        """Gets leaderboards with the signed in user's friends and the supplied
        destinyMembershipId as the focus.

        PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetLeaderboardsForCharacterResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_leaderboards_for_character(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        maxtop: t.Optional[int] = None,
        modes: t.Optional[str] = None,
        statid: t.Optional[str] = None,
    ) -> GetLeaderboardsForCharacterResponse:
        """Gets leaderboards with the signed in user's friends and the supplied
        destinyMembershipId as the focus.

        PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
        """
        ...

    @dt.dataclass(frozen=True)
    class SearchDestinyEntitiesResponse:
        response: "DestinyDefinitionsDestinyEntitySearchResult"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def search_destiny_entities(
        self,
        search_term: str,
        type: str,
        page: t.Optional[int] = None,
    ) -> SearchDestinyEntitiesResponse:
        """Gets a page list of Destiny items."""
        ...

    @dt.dataclass(frozen=True)
    class GetHistoricalStatsResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_historical_stats(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        dayend: t.Optional[str] = None,
        daystart: t.Optional[str] = None,
        groups: t.Optional[t.Sequence[int]] = None,
        modes: t.Optional[t.Sequence[int]] = None,
        period_type: t.Optional[int] = None,
    ) -> GetHistoricalStatsResponse:
        """Gets historical stats for indicated character."""
        ...

    @dt.dataclass(frozen=True)
    class GetHistoricalStatsForAccountResponse:
        response: "DestinyHistoricalStatsDestinyHistoricalStatsAccountResult"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_historical_stats_for_account(
        self,
        destiny_membership_id: int,
        membership_type: int,
        groups: t.Optional[t.Sequence[int]] = None,
    ) -> GetHistoricalStatsForAccountResponse:
        """Gets aggregate historical stats organized around each character for
        a given account."""
        ...

    @dt.dataclass(frozen=True)
    class GetActivityHistoryResponse:
        response: "DestinyHistoricalStatsDestinyActivityHistoryResults"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_activity_history(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
        count: t.Optional[int] = None,
        mode: t.Optional[int] = None,
        page: t.Optional[int] = None,
    ) -> GetActivityHistoryResponse:
        """Gets activity history stats for indicated character."""
        ...

    @dt.dataclass(frozen=True)
    class GetUniqueWeaponHistoryResponse:
        response: "DestinyHistoricalStatsDestinyHistoricalWeaponStatsData"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_unique_weapon_history(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
    ) -> GetUniqueWeaponHistoryResponse:
        """Gets details about unique weapon usage, including all exotic
        weapons."""
        ...

    @dt.dataclass(frozen=True)
    class GetDestinyAggregateActivityStatsResponse:
        response: "DestinyHistoricalStatsDestinyAggregateActivityResults"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_destiny_aggregate_activity_stats(
        self,
        character_id: int,
        destiny_membership_id: int,
        membership_type: int,
    ) -> GetDestinyAggregateActivityStatsResponse:
        """Gets all activities the character has participated in together with
        aggregate statistics for those activities."""
        ...

    @dt.dataclass(frozen=True)
    class GetPublicMilestoneContentResponse:
        response: "DestinyMilestonesDestinyMilestoneContent"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_public_milestone_content(
        self,
        milestone_hash: int,
    ) -> GetPublicMilestoneContentResponse:
        """Gets custom localized content for the milestone of the given hash,
        if it exists."""
        ...

    @dt.dataclass(frozen=True)
    class GetPublicMilestonesResponse:
        response: t.Any
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_public_milestones(
        self,
    ) -> GetPublicMilestonesResponse:
        """Gets public information about currently available Milestones."""
        ...

    @dt.dataclass(frozen=True)
    class AwaInitializeRequestResponse:
        response: "DestinyAdvancedAwaInitializeResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def awa_initialize_request(
        self,
    ) -> AwaInitializeRequestResponse:
        """Initialize a request to perform an advanced write action."""
        ...

    @dt.dataclass(frozen=True)
    class AwaProvideAuthorizationResultResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def awa_provide_authorization_result(
        self,
    ) -> AwaProvideAuthorizationResultResponse:
        """Provide the result of the user interaction.

        Called by the Bungie Destiny App to approve or reject a request.
        """
        ...

    @dt.dataclass(frozen=True)
    class AwaGetActionTokenResponse:
        response: "DestinyAdvancedAwaAuthorizationResult"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def awa_get_action_token(
        self,
        correlation_id: str,
    ) -> AwaGetActionTokenResponse:
        """Returns the action token if user approves the request."""
        ...


class CommunityContentClient(BaseClient):
    @dt.dataclass(frozen=True)
    class GetCommunityContentResponse:
        response: "ForumPostSearchResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_community_content(
        self,
        media_filter: int,
        page: int,
        sort: int,
    ) -> GetCommunityContentResponse:
        """Returns community content."""
        ...


class TrendingClient(BaseClient):
    @dt.dataclass(frozen=True)
    class GetTrendingCategoriesResponse:
        response: "TrendingTrendingCategories"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_trending_categories(
        self,
    ) -> GetTrendingCategoriesResponse:
        """Returns trending items for Bungie.net, collapsed into the first page
        of items per category.

        For pagination within a category, call GetTrendingCategory.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetTrendingCategoryResponse:
        response: "SearchResultOfTrendingEntry"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_trending_category(
        self,
        category_id: str,
        page_number: int,
    ) -> GetTrendingCategoryResponse:
        """Returns paginated lists of trending items for a category."""
        ...

    @dt.dataclass(frozen=True)
    class GetTrendingEntryDetailResponse:
        response: "TrendingTrendingDetail"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_trending_entry_detail(
        self,
        identifier: str,
        trending_entry_type: int,
    ) -> GetTrendingEntryDetailResponse:
        """Returns the detailed results for a specific trending entry.

        Note that trending entries are uniquely identified by a
        combination of *both* the TrendingEntryType *and* the
        identifier: the identifier alone is not guaranteed to be
        globally unique.
        """
        ...


class FireteamClient(BaseClient):
    @dt.dataclass(frozen=True)
    class GetActivePrivateClanFireteamCountResponse:
        response: int
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_active_private_clan_fireteam_count(
        self,
        group_id: int,
    ) -> GetActivePrivateClanFireteamCountResponse:
        """Gets a count of all active non-public fireteams for the specified
        clan.

        Maximum value returned is 25.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetAvailableClanFireteamsResponse:
        response: "SearchResultOfFireteamSummary"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_available_clan_fireteams(
        self,
        activity_type: int,
        date_range: int,
        group_id: int,
        page: int,
        platform: int,
        public_only: int,
        slot_filter: int,
        lang_filter: t.Optional[str] = None,
    ) -> GetAvailableClanFireteamsResponse:
        """Gets a listing of all of this clan's fireteams that are have
        available slots.

        Caller is not checked for join criteria so caching is maximized.
        """
        ...

    @dt.dataclass(frozen=True)
    class SearchPublicAvailableClanFireteamsResponse:
        response: "SearchResultOfFireteamSummary"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def search_public_available_clan_fireteams(
        self,
        activity_type: int,
        date_range: int,
        page: int,
        platform: int,
        slot_filter: int,
        lang_filter: t.Optional[str] = None,
    ) -> SearchPublicAvailableClanFireteamsResponse:
        """Gets a listing of all public fireteams starting now with open slots.

        Caller is not checked for join criteria so caching is maximized.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetMyClanFireteamsResponse:
        response: "SearchResultOfFireteamResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_my_clan_fireteams(
        self,
        group_id: int,
        include_closed: bool,
        page: int,
        platform: int,
        group_filter: t.Optional[bool] = None,
        lang_filter: t.Optional[str] = None,
    ) -> GetMyClanFireteamsResponse:
        """Gets a listing of all fireteams that caller is an applicant, a
        member, or an alternate of."""
        ...

    @dt.dataclass(frozen=True)
    class GetClanFireteamResponse:
        response: "FireteamFireteamResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_clan_fireteam(
        self,
        fireteam_id: int,
        group_id: int,
    ) -> GetClanFireteamResponse:
        """Gets a specific fireteam."""
        ...


class SocialClient(BaseClient):
    @dt.dataclass(frozen=True)
    class GetFriendListResponse:
        response: "SocialFriendsBungieFriendListResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_friend_list(
        self,
    ) -> GetFriendListResponse:
        """Returns your Bungie Friend list."""
        ...

    @dt.dataclass(frozen=True)
    class GetFriendRequestListResponse:
        response: "SocialFriendsBungieFriendRequestListResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_friend_request_list(
        self,
    ) -> GetFriendRequestListResponse:
        """Returns your friend request queue."""
        ...

    @dt.dataclass(frozen=True)
    class IssueFriendRequestResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def issue_friend_request(
        self,
        membership_id: str,
    ) -> IssueFriendRequestResponse:
        """Requests a friend relationship with the target user.

        Any of the target user's linked membership ids are valid inputs.
        """
        ...

    @dt.dataclass(frozen=True)
    class AcceptFriendRequestResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def accept_friend_request(
        self,
        membership_id: str,
    ) -> AcceptFriendRequestResponse:
        """Accepts a friend relationship with the target user.

        The user must be on your incoming friend request list, though no
        error will occur if they are not.
        """
        ...

    @dt.dataclass(frozen=True)
    class DeclineFriendRequestResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def decline_friend_request(
        self,
        membership_id: str,
    ) -> DeclineFriendRequestResponse:
        """Declines a friend relationship with the target user.

        The user must be on your incoming friend request list, though no
        error will occur if they are not.
        """
        ...

    @dt.dataclass(frozen=True)
    class RemoveFriendResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def remove_friend(
        self,
        membership_id: str,
    ) -> RemoveFriendResponse:
        """Remove a friend relationship with the target user.

        The user must be on your friend list, though no error will occur
        if they are not.
        """
        ...

    @dt.dataclass(frozen=True)
    class RemoveFriendRequestResponse:
        response: bool
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def remove_friend_request(
        self,
        membership_id: str,
    ) -> RemoveFriendRequestResponse:
        """Remove a friend relationship with the target user.

        The user must be on your outgoing request friend list, though no
        error will occur if they are not.
        """
        ...

    @dt.dataclass(frozen=True)
    class GetPlatformFriendListResponse:
        response: "SocialFriendsPlatformFriendResponse"
        error_code: int
        throttle_seconds: int
        error_status: str
        message: str
        message_data: t.Any
        detailed_error_trace: str

    def get_platform_friend_list(
        self,
        friend_platform: int,
        page: str,
    ) -> GetPlatformFriendListResponse:
        """Gets the platform friend of the requested type, with additional
        information if they have Bungie accounts.

        Must have a recent login session with said platform.
        """
        ...


BASE_URL = "https://www.bungie.net"
BASE_PATH = "/Platform"


class Client:
    _session = t.Optional[aiohttp.ClientSession]

    def __init__(self, base_url=BASE_URL, **kwargs) -> None:
        self._base_url = base_url
        self._session = None
        self._kwargs = kwargs

    async def __aenter__(self) -> RootClient:
        self._session = aiohttp.ClientSession(base_url=self._base_url, **self._kwargs)
        return RootClient(self._session, BASE_PATH)

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        assert self._session
        await self._session.close()


__all__ = ["Client"]
