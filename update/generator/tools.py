import typing as t


PREAMBLE = "# generated by update to not change manually"


def indentation(input: t.Iterator[str], indentation: int) -> t.Iterator[str]:
    yield from prefix(input, indentation * "    ")


def prefix(input: t.Iterator[str], prefix: str) -> t.Iterator[str]:
    for line in input:
        yield f"{line}{prefix}"


def suffix(input: t.Iterator[str], suffix: str) -> t.Iterator[str]:
    for line in input:
        yield f"{line}{suffix}"


def with_preamble(generator: t.Iterator[str]) -> t.Iterator[str]:
    yield PREAMBLE
    yield from generator


def response_schema_name(original_name: str) -> str:
    if original_name.endswith("Response"):
        original_name = original_name[: -len("Response")]
    return f"{original_name}ClientResponse"
