from functools import singledispatch
from pathlib import Path

from svarog.tools import camel_to_snake

from update.generators.generic import generate_response, indentation, literal, generate_schema
from update.generators.imports import generate_imports
from update.openapi import OpenApi, OperationTree, BindOperation, TypeTree
import typing as t

PREAMBLE = "# generated by update to not change manually"

@singledispatch
def generate_client_method(
    node: t.Union[OperationTree, BindOperation]
) -> t.Iterator[str]:
    raise RuntimeError(f"Not defined for type {type(node)}")

def get_response_type_name(operation: BindOperation) -> str:
    return f"{operation.name}ClientResponse"


@generate_client_method.register
def generate_client_method_operation(operation: BindOperation) -> t.Iterator[str]:
    response_type_name = get_response_type_name(operation)

    yield f"    async def {operation.python_name}(self,"
    for parameter in sorted(
        operation.parameters, key=lambda param: not param.type.required
    ):
        yield f"{parameter.python_name}: {literal(parameter.type, []) }{ ' = None' if not parameter.type.required  else ''},"
    yield f") -> {response_type_name}:"
    if operation.description:
        yield f'        """{operation.description}"""'
    yield f"        ..."


@generate_client_method.register
def generate_client_method_node(operation_tree: OperationTree) -> t.Iterator[str]:
    klass = f"clients.{camel_to_snake(operation_tree.name)}.Client"
    yield "    @property"
    yield f"    def {camel_to_snake(operation_tree.name)}(self) -> {klass}: "
    yield f"        return {klass}(self._session, self._path)"


def generate_client(operation_tree: OperationTree) -> t.Iterator[str]:
    yield "from .. import clients"
    yield "import dataclasses as dt"
    yield "import typing as t"
    yield "from ...base import BaseClient"

    for operation in operation_tree.child_operations():
        yield from generate_imports(operation, [])


    for operation in operation_tree.child_operations():
        response_type_name = get_response_type_name(operation)
        yield from generate_response(operation.response, response_type_name)

    yield f"class Client(BaseClient):"
    if not operation_tree.children:
        yield "..."

    for child in operation_tree.children:
        yield from generate_client_method(child)


def with_preamble(generator: t.Iterator[str]) -> t.Iterator[str]:
    yield PREAMBLE
    yield from generator


def generate_clients_init(root: OperationTree) -> t.Iterator[str]:
    submodules = [camel_to_snake(operation_tree.name) for operation_tree in root.child_clients()]
    for submodule in submodules:
        yield f"from . import {submodule}"
    all = [f'"{submodule}"' for submodule in submodules]
    yield f"__all__ = [{', '.join(all)}]"


def type_module_generator(types: TypeTree, module: t.Sequence[str]) -> t.Iterator[str]:
    # for sub_type in types.child_types():
    #     yield f"from . import {sub_type.name}"

    yield "import typing as t"
    yield "import dataclasses as dt"

    for schema in types.child_schema():
        yield from generate_imports(schema.schema, module)

    for schema in types.child_schema():
        yield from generate_schema(schema.schema, schema.schema_name, module)


def types_generator(
    path: Path, types: TypeTree
) -> t.Iterator[t.Tuple[Path, t.Iterator[str]]]:
    module = str(path / Path(types.name) ).split("/")

    if any(types.child_types()):
        yield path / Path(types.name) / Path("__init__.py"), with_preamble(
            type_module_generator(types, module)
        )
    else:
        yield path / Path(f"{types.name}.py"), with_preamble(
            type_module_generator(types, module)
        )

    for sub_type in types.child_types():
        yield from types_generator(path / Path(types.name), sub_type)


def empty() -> t.Iterator[str]:
    yield from []


def asyncio_generator(api: OpenApi) -> t.Iterator[t.Tuple[Path, t.Iterator[str]]]:
    yield Path("__init__.py"), with_preamble(empty())
    root = api.operations_tree()

    yield Path("clients") / "__init__.py", with_preamble(generate_clients_init(root))

    for operation_tree in (root, *root.child_clients()):
        yield Path(
            "clients"
        ) / f"{camel_to_snake(operation_tree.name)}.py", with_preamble(
            generate_client(operation_tree)
        )

    yield from types_generator(Path("."), api.types_tree())


def clients_generator(api: OpenApi) -> t.Iterator[str]:
    yield "import dataclasses as dt"
    yield "import typing as t"
    yield "from bungieapi.base import BaseClient"
    yield from generate_client(api.operations_tree())
